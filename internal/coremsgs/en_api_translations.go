// Copyright Â© 2022 Kaleido, Inc.
//
// SPDX-License-Identifier: Apache-2.0
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package coremsgs

import (
	"github.com/hyperledger/firefly-common/pkg/i18n"
	"golang.org/x/text/language"
)

var ffm = i18n.FFM

//revive:disable
var (
	CoreSystemNSDescription = ffm(language.AmericanEnglish, "core.systemNSDescription", "FireFly system namespace")

	APIParamsConfigRecordKeyUpdate          = ffm(language.AmericanEnglish, "api.params.configRecordKey.update", "The configuration key to update. This should use dot notation to reference a key documented in https://hyperledger.github.io/firefly/reference/config.html")
	APIParamsConfigRecordKeyGet             = ffm(language.AmericanEnglish, "api.params.configRecordKey.get", "The configuration key to get. This should use dot notation to reference a key documented in https://hyperledger.github.io/firefly/reference/config.html")
	APIParamsOperationIDGet                 = ffm(language.AmericanEnglish, "api.params.operationID.get", "The operation ID key to get")
	APIParamsNamespace                      = ffm(language.AmericanEnglish, "api.params.namespace", "The namespace which scopes this request")
	APIParamsContractListenerNameOrID       = ffm(language.AmericanEnglish, "api.params.contractListenerNameOrID", "The contract listener name or ID")
	APIParamsSubscriptionID                 = ffm(language.AmericanEnglish, "api.params.subscriptionID", "The subscription ID")
	APIParamsBatchID                        = ffm(language.AmericanEnglish, "api.params.batchId", "The batch ID")
	APIParamsBlockchainEventID              = ffm(language.AmericanEnglish, "api.params.blockchainEventID", "The blockchain event ID")
	APIParamsCollectionID                   = ffm(language.AmericanEnglish, "api.params.collectionID", "The collection ID")
	APIParamsContractAPIName                = ffm(language.AmericanEnglish, "api.params.contractAPIName", "The name of the contract API")
	APIParamsContractInterfaceName          = ffm(language.AmericanEnglish, "api.params.contractInterfaceName", "The name of the contract interface")
	APIParamsContractInterfaceVersion       = ffm(language.AmericanEnglish, "api.params.contractInterfaceVersion", "The version of the contract interface")
	APIParamsContractInterfaceID            = ffm(language.AmericanEnglish, "api.params.contractInterfaceID", "The ID of the contract interface")
	APIParamsContractInterfaceFetchChildren = ffm(language.AmericanEnglish, "api.params.contractInterfaceFetchChildren", "When set, the API will return the full FireFly Interface document including all methods, events, and parameters")
	APIParamsBlobID                         = ffm(language.AmericanEnglish, "api.params.blobID", "The blob ID")
	APIParamsDataID                         = ffm(language.AmericanEnglish, "api.params.dataID", "The data item ID")
	APIParamsDatatypeName                   = ffm(language.AmericanEnglish, "api.params.datatypeName", "The name of the datatype")
	APIParamsDatatypeVersion                = ffm(language.AmericanEnglish, "api.params.datatypeVersion", "The version of the datatype")
	APIParamsEventID                        = ffm(language.AmericanEnglish, "api.params.eventID", "The event ID")
	APIParamsFetchReferences                = ffm(language.AmericanEnglish, "api.params.fetchReferences", "When set, the API will return the record that this item references in its 'ref' field")
	APIParamsGroupHash                      = ffm(language.AmericanEnglish, "api.params.groupID", "The hash of the group")
	APIParamsFetchVerifiers                 = ffm(language.AmericanEnglish, "api.params.fetchVerifiers", "When set, the API will return the verifier for this identity")
	APIParamsIdentityID                     = ffm(language.AmericanEnglish, "api.params.identityID", "The identity ID, which is a UUID generated by FireFly")
	APIParamsMessageID                      = ffm(language.AmericanEnglish, "api.params.messageID", "The message ID")
	APIParamsDID                            = ffm(language.AmericanEnglish, "api.params.DID", "The identity DID")
	APIParamsNodeNameOrID                   = ffm(language.AmericanEnglish, "api.params.nodeNameOrID", "The name or ID of the node")
	APIParamsOrgNameOrID                    = ffm(language.AmericanEnglish, "api.params.orgNameOrID", "The name or ID of the org")
	APIParamsTokenAccountKey                = ffm(language.AmericanEnglish, "api.params.tokenAccountKey", "The key for the token account. The exact format may vary based on the token connector use.")
	APIParamsTokenPoolNameOrID              = ffm(language.AmericanEnglish, "api.params.tokenPoolNameOrID", "The token pool name or ID")
	APIParamsTokenTransferFromOrTo          = ffm(language.AmericanEnglish, "api.params.tokenTransferFromOrTo", "The sending or receiving token account for a token transfer")
	APIParamsTokenTransferID                = ffm(language.AmericanEnglish, "api.params.tokenTransferID", "The token transfer ID")
	APIParamsTransactionID                  = ffm(language.AmericanEnglish, "api.params.transactionID", "The transaction ID")
	APIParamsVerifierHash                   = ffm(language.AmericanEnglish, "api.params.verifierID", "The hash of the verifier")
	APIParamsMethodPath                     = ffm(language.AmericanEnglish, "api.params.methodPath", "The name or uniquely generated path name of a method on a smart contract")
	APIParamsEventPath                      = ffm(language.AmericanEnglish, "api.params.eventPath", "The name or uniquely generated path name of a event on a smart contract")
	APIParamsInterfaceID                    = ffm(language.AmericanEnglish, "api.params.interfaceID", "The contract interface ID")
	APIParamsValidator                      = ffm(language.AmericanEnglish, "api.params.validator", "The validator type for this data item. Options are: \"json\", \"none\", or \"definition\"")
	APIParamsMetadata                       = ffm(language.AmericanEnglish, "api.params.metadata", "Metadata associated with this data item")
	APIParamsAutometa                       = ffm(language.AmericanEnglish, "api.params.autometa", "When set, FireFly will automatically generate JSON metadata with the upload details")
	APIParamsContractAPIID                  = ffm(language.AmericanEnglish, "api.params.contractAPIID", "The ID of the contract API")

	APIEndpointsAdminDeleteConfigRecord = ffm(language.AmericanEnglish, "api.endpoints.adminDeleteConfigRecord", "Deletes a configuration record from the database")
	APIEndpointsAdminGetConfigRecord    = ffm(language.AmericanEnglish, "api.endpoints.adminGetConfigRecord", "Gets a configuration record from the database")
	APIEndpointsAdminGetConfigRecords   = ffm(language.AmericanEnglish, "api.endpoints.adminGetConfigRecords", "Lists configuration records from the database")
	APIEndpointsAdminGetConfig          = ffm(language.AmericanEnglish, "api.endpoints.adminGetConfig", "Gets the full configuration for this node")
	APIEndpointsAdminGetOpByID          = ffm(language.AmericanEnglish, "api.endpoints.adminGetOpByID", "Gets an operation by ID")
	APIEndpointsAdminGetOps             = ffm(language.AmericanEnglish, "api.endpoints.adminGetOps", "Lists operations")
	APIEndpointsAdminPutConfigRecord    = ffm(language.AmericanEnglish, "api.endpoints.adminPutConfigRecord", "Sets a configuration key in the database. This will override matching configuration keys set in the core config file.")
	APIEndpointsAdminPostResetConfig    = ffm(language.AmericanEnglish, "api.endpoints.adminPostResetConfig", "Restarts FireFly Core HTTP servers and apply all configuration updates. This will apply any new changes that have been made to the core config file, or through the admin API.")
	APIEndpointsAdminPatchOpByID        = ffm(language.AmericanEnglish, "api.endpoints.adminPatchOpByID", "Updates an operation by ID")

	APIEndpointsDeleteContractListener          = ffm(language.AmericanEnglish, "api.endpoints.deleteContractListener", "Deletes a contract listener referenced by its name or its ID")
	APIEndpointsDeleteSubscription              = ffm(language.AmericanEnglish, "api.endpoints.deleteSubscription", "Deletes a subscription")
	APIEndpointsGetBatchBbyID                   = ffm(language.AmericanEnglish, "api.endpoints.getBatchByID", "Gets a message batch")
	APIEndpointsGetBatches                      = ffm(language.AmericanEnglish, "api.endpoints.getBatches", "Gets a list of message batches")
	APIEndpointsGetBlockchainEventByID          = ffm(language.AmericanEnglish, "api.endpoints.getBlockchainEventByID", "Gets a blockchain event")
	APIEndpointsListBlockchainEvents            = ffm(language.AmericanEnglish, "api.endpoints.getBlockchainEvents", "Gets a list of blockchain events")
	APIEndpointsGetChartHistogram               = ffm(language.AmericanEnglish, "api.endpoints.getChartHistogram", "Gets a JSON object containing statistics data that can be used to build a graphical representation of recent activity in a given database collection")
	APIEndpointsGetContractAPIByName            = ffm(language.AmericanEnglish, "api.endpoints.getContractAPIByName", "Gets information about a contract API, including the URLs for the OpenAPI Spec and Swagger UI for the API")
	APIEndpointsGetContractAPIs                 = ffm(language.AmericanEnglish, "api.endpoints.getContractAPIs", "Gets a list of contract APIs that have been published")
	APIEndpointsGetContractInterfaceNameVersion = ffm(language.AmericanEnglish, "api.endpoints.getContractInterfaceNameVersion", "Gets a contract interface by its name and version")
	APIEndpointsGetContractInterface            = ffm(language.AmericanEnglish, "api.endpoints.getContractInterface", "Gets a contract interface by its ID")
	APIEndpointsGetContractInterfaces           = ffm(language.AmericanEnglish, "api.endpoints.getContractInterfaces", "Gets a list of contract interfaces that have been published")
	APIEndpointsGetContractListenerByNameOrID   = ffm(language.AmericanEnglish, "api.endpoints.getContractListenerByNameOrID", "Gets a contract listener by its name or ID")
	APIEndpointsGetContractListeners            = ffm(language.AmericanEnglish, "api.endpoints.getContractListeners", "Gets a list of contract listeners")
	APIEndpointsGetDataBlob                     = ffm(language.AmericanEnglish, "api.endpoints.getDataBlob", "Downloads the original file that was previously uploaded or received")
	APIEndpointsGetDataByID                     = ffm(language.AmericanEnglish, "api.endpoints.getDataByID", "Gets a data item by its ID, including metadata about this item")
	APIEndpointsGetDataMsgs                     = ffm(language.AmericanEnglish, "api.endpoints.getDataMsgs", "Gets a list of the messages associated with a data item")
	APIEndpointsGetData                         = ffm(language.AmericanEnglish, "api.endpoints.getData", "Gets a list of data items")
	APIEndpointsGetDatatypeByName               = ffm(language.AmericanEnglish, "api.endpoints.getDatatypeByName", "Gets a datatype by its name and version")
	APIEndpointsGetDatatypes                    = ffm(language.AmericanEnglish, "api.endpoints.getDatatypes", "Gets a list of datatypes that have been published")
	APIEndpointsGetEventByID                    = ffm(language.AmericanEnglish, "api.endpoints.eventID", "Gets an event by its ID")
	APIEndpointsGetEvents                       = ffm(language.AmericanEnglish, "api.endpoints.getEvents", "Gets a list of events")
	APIEndpointsGetGroupByHash                  = ffm(language.AmericanEnglish, "api.endpoints.getGroupByHash", "Gets a group by its ID (hash)")
	APIEndpointsGetGroups                       = ffm(language.AmericanEnglish, "api.endpoints.getGroups", "Gets a list of groups")
	APIEndpointsGetIdentities                   = ffm(language.AmericanEnglish, "api.endpoints.getIdentities", "Gets a list of identities that have been registered in the network")
	APIEndpointsGetIdentityByID                 = ffm(language.AmericanEnglish, "api.endpoints.getIdentityByID", "Gets an identity by its ID")
	APIEndpointsGetIdentityDID                  = ffm(language.AmericanEnglish, "api.endpoints.getIdentityDID", "Gets the DID for an identity based on its ID")
	APIEndpointsGetIdentityVerifiers            = ffm(language.AmericanEnglish, "api.endpoints.getIdentityVerifiers", "Gets the verifiers for an identity")
	APIEndpointsGetMsgByID                      = ffm(language.AmericanEnglish, "api.endpoints.getMsgByID", "Gets a message by its ID")
	APIEndpointsGetMsgData                      = ffm(language.AmericanEnglish, "api.endpoints.getMsgData", "Gets the list of data items that are attached to a message")
	APIEndpointsGetMsgEvents                    = ffm(language.AmericanEnglish, "api.endpoints.getMsgEvents", "Gets the list of events for a message")
	APIEndpointsGetMsgTxn                       = ffm(language.AmericanEnglish, "api.endpoints.getMsgTxn", "Gets the transaction for a message")
	APIEndpointsGetMsgs                         = ffm(language.AmericanEnglish, "api.endpoints.getMsgs", "Gets a list of messages")
	APIEndpointsGetNamespace                    = ffm(language.AmericanEnglish, "api.endpoints.getNamespace", "Gets a namespace")
	APIEndpointsGetNamespaces                   = ffm(language.AmericanEnglish, "api.endpoints.getNamespaces", "Gets a list of namespaces")
	APIEndpointsGetIdentityByDID                = ffm(language.AmericanEnglish, "api.endpoints.getIdentityByDID", "Gets an identity by its DID")
	APIEndpointsGetDIDDocByDID                  = ffm(language.AmericanEnglish, "api.endpoints.getDIDDocByDID", "Gets a DID document by its DID")
	APIEndpointsGetNetworkIdentities            = ffm(language.AmericanEnglish, "api.endpoints.getNetworkIdentities", "Gets the list of identities in the network")
	APIEndpointsGetNetworkNode                  = ffm(language.AmericanEnglish, "api.endpoints.getNetworkNode", "Gets information about a specific node in the network")
	APIEndpointsGetNetworkNodes                 = ffm(language.AmericanEnglish, "api.endpoints.getNetworkNodes", "Gets a list of nodes in the network")
	APIEndpointsGetNetworkOrg                   = ffm(language.AmericanEnglish, "api.endpoints.getNetworkOrg", "Gets information about a specifc org in the network")
	APIEndpointsGetNetworkOrgs                  = ffm(language.AmericanEnglish, "api.endpoints.APIEndpointsGetNetworkOrgs", "Gets a list of orgs in the network")
	APIEndpointsGetOpByID                       = ffm(language.AmericanEnglish, "api.endpoints.getOpByID", "Gets an operation by ID")
	APIEndpointsGetOps                          = ffm(language.AmericanEnglish, "api.endpoints.getOps", "Gets a a list of operations")
	APIEndpointsGetStatusBatchManager           = ffm(language.AmericanEnglish, "api.endpoints.getStatusBatchManager", "Gets the status of the batch manager")
	APIEndpointsGetStatusPins                   = ffm(language.AmericanEnglish, "api.endpoints.getStatusPins", "Queries the pins table that is the status of the event aggregator")
	APIEndpointsGetStatusWebSockets             = ffm(language.AmericanEnglish, "api.endpoints.getStatusWebSockets", "Gets the status of the current WebSocket connections to this node")
	APIEndpointsGetStatus                       = ffm(language.AmericanEnglish, "api.endpoints.getStatus", "Gets the status of this node")
	APIEndpointsGetSubscriptionByID             = ffm(language.AmericanEnglish, "api.endpoints.getSubscriptionByID", "Gets a subscription by its ID")
	APIEndpointsGetSubscriptions                = ffm(language.AmericanEnglish, "api.endpoints.getSubscriptions", "Gets a list of subscriptions")
	APIEndpointsGetTokenAccountPools            = ffm(language.AmericanEnglish, "api.endpoints.getTokenAccountPools", "Gets a list of token pools that contain a given token account key")
	APIEndpointsGetTokenAccounts                = ffm(language.AmericanEnglish, "api.endpoints.getTokenAccounts", "Gets a list of token accounts")
	APIEndpointsGetTokenApprovals               = ffm(language.AmericanEnglish, "api.endpoints.getTokenApprovals", "Gets a list of token approvals")
	APIEndpointsGetTokenBalances                = ffm(language.AmericanEnglish, "api.endpoints.getTokenBalances", "Gets a list of token balances")
	APIEndpointsGetTokenConnectors              = ffm(language.AmericanEnglish, "api.endpoints.getTokenConnectors", "Gets the list of token connectors currently in use")
	APIEndpointsGetTokenPoolByNameOrID          = ffm(language.AmericanEnglish, "api.endpoints.getTokenPoolByNameOrID", "Gets a token pool by its name or its ID")
	APIEndpointsGetTokenPools                   = ffm(language.AmericanEnglish, "api.endpoints.getTokenPools", "Gets a list of token pools")
	APIEndpointsGetTokenTransferByID            = ffm(language.AmericanEnglish, "api.endpoints.getTokenTransferByID", "Gets a token transfer by its ID")
	APIEndpointsGetTokenTransfers               = ffm(language.AmericanEnglish, "api.endpoints.getTokenTransfers", "Gets a list of token transfers")
	APIEndpointsGetTxnBlockchainEvents          = ffm(language.AmericanEnglish, "api.endpoints.getTxnBlockchainEvents", "Gets a list blockchain events for a specific transaction")
	APIEndpointsGetTxnByID                      = ffm(language.AmericanEnglish, "api.endpoints.getTxnByID", "Gets a transaction by its ID")
	APIEndpointsGetTxnOps                       = ffm(language.AmericanEnglish, "api.endpoints.getTxnOps", "Gets a list of operations in a specific transaction")
	APIEndpointsGetTxnStatus                    = ffm(language.AmericanEnglish, "api.endpoints.getTxnStatus", "Gets the status of a transaction")
	APIEndpointsGetTxns                         = ffm(language.AmericanEnglish, "api.endpoints.getTxns", "Gets a list of transactions")
	APIEndpointsGetVerifierByHash               = ffm(language.AmericanEnglish, "api.endpoints.getVerifierByHash", "Gets a verifier by its hash")
	APIEndpointsGetVerifiers                    = ffm(language.AmericanEnglish, "api.endpoints.getVerifiers", "Gets a list of verifiers")
	APIEndpointsPatchUpdateIdentity             = ffm(language.AmericanEnglish, "api.endpoints.patchUpdateIdentity", "Updates an identity")
	APIEndpointsPostContractAPIInvoke           = ffm(language.AmericanEnglish, "api.endpoints.postContractAPIInvoke", "Invokes a method on a smart contract API. Performs a blockchain transaction.")
	APIEndpointsPostContractAPIQuery            = ffm(language.AmericanEnglish, "api.endpoints.postContractAPIQuery", "Queries a method on a smart contract API. Performs a read-only query.")
	APIEndpointsPostContractInterfaceGenerate   = ffm(language.AmericanEnglish, "api.endpoints.postContractInterfaceGenerate", "A convenience method to convert a blockchain specific smart contract format into a FireFly Interface format. The specific blockchain plugin in use must support this functionality.")
	APIEndpointsPostContractInterfaceInvoke     = ffm(language.AmericanEnglish, "api.endpoints.postContractInterfaceInvoke", "Invokes a method on a smart contract that matches a given contract interface. Performs a blockchain transaction.")
	APIEndpointsPostContractInterfaceQuery      = ffm(language.AmericanEnglish, "api.endpoints.postContractInterfaceQuery", "Queries a method on a smart contract that matches a given contract interface. Performs a read-only query.")
	APIEndpointsPostContractInvoke              = ffm(language.AmericanEnglish, "api.endpoints.postContractInvoke", "Invokes a method on a smart contract. Performs a blockchain transaction.")
	APIEndpointsPostContractQuery               = ffm(language.AmericanEnglish, "api.endpoints.postContractQuery", "Queries a method on a smart contract. Performs a read-only query.")
	APIEndpointsPostData                        = ffm(language.AmericanEnglish, "api.endpoints.postData", "Creates a new data item in this FireFly node")
	APIEndpointsPostNewContractAPI              = ffm(language.AmericanEnglish, "api.endpoints.postNewContractAPI", "Creates and broadcasts a new custom smart contract API")
	APIEndpointsPostNewContractInterface        = ffm(language.AmericanEnglish, "api.endpoints.postNewContractInterface", "Creates and broadcasts a new custom smart contract interface")
	APIEndpointsPostNewContractListener         = ffm(language.AmericanEnglish, "api.endpoints.postNewContractListener", "Creates a new blockchain listener for events emitted by custom smart contracts")
	APIEndpointsPostNewDatatype                 = ffm(language.AmericanEnglish, "api.endpoints.postNewDatatype", "Creates and broadcasts a new datatype")
	APIEndpointsPostNewIdentity                 = ffm(language.AmericanEnglish, "api.endpoints.postNewIdentity", "Registers a new identity in the network")
	APIEndpointsPostNewMessageBroadcast         = ffm(language.AmericanEnglish, "api.endpoints.postNewMessageBroadcast", "Broadcasts a message to all members in the network")
	APIEndpointsPostNewMessagePrivate           = ffm(language.AmericanEnglish, "api.endpoints.postNewMessagePrivate", "Privately sends a message to one or more members in the network")
	APIEndpointsPostNewMessageRequestReply      = ffm(language.AmericanEnglish, "api.endpoints.postNewMessageRequestReply", "Sends a message with a blocking HTTP request, waits for a reply to that message, then sends the reply as the HTTP response.")
	APIEndpointsPostNewNamespace                = ffm(language.AmericanEnglish, "api.endpoints.postNewNamespace", "Creates and broadcasts a new namespace")
	APIEndpointsPostNodesSelf                   = ffm(language.AmericanEnglish, "api.endpoints.postNodesSelf", "Instructs this FireFly node to register itself on the network")
	APIEndpointsPostNewOrganizationSelf         = ffm(language.AmericanEnglish, "api.endpoints.postNewOrganizationSelf", "Instructs this FireFly node to register its org on the network")
	APIEndpointsPostNewOrganization             = ffm(language.AmericanEnglish, "api.endpoints.postNewOrganization", "Registers a new org in the network")
	APIEndpointsPostNewSubscription             = ffm(language.AmericanEnglish, "api.endpoints.postNewSubscription", "Creates a new subscription for an application to receive events from FireFly")
	APIEndpointsPostOpRetry                     = ffm(language.AmericanEnglish, "api.endpoints.postOpRetry", "Retries a failed operation")
	APIEndpointsPostTokenApproval               = ffm(language.AmericanEnglish, "api.endpoints.postTokenApproval", "Creates a token approval")
	APIEndpointsPostTokenBurn                   = ffm(language.AmericanEnglish, "api.endpoints.postTokenBurn", "Burns some tokens")
	APIEndpointsPostTokenMint                   = ffm(language.AmericanEnglish, "api.endpoints.postTokenMint", "Mints some tokens")
	APIEndpointsPostTokenPool                   = ffm(language.AmericanEnglish, "api.endpoints.postTokenPool", "Creates a new token pool")
	APIEndpointsPostTokenTransfer               = ffm(language.AmericanEnglish, "api.endpoints.postTokenTransfer", "Transfers some tokens")
	APIEndpointsPutContractAPI                  = ffm(language.AmericanEnglish, "api.endpoints.putContractAPI", "Updates an existing contract API")
	APIEndpointsPutSubscription                 = ffm(language.AmericanEnglish, "api.endpoints.putSubscription", "Update an existing subscription")
	APIEndpointsGetContractAPIInterface         = ffm(language.AmericanEnglish, "api.endpoints.getContractAPIInterface", "Gets a contract interface for a contract API")

	APISuccessResponse         = ffm(language.AmericanEnglish, "api.success", "Success")
	APIRequestTimeoutDesc      = ffm(language.AmericanEnglish, "api.requestTimeout", "Server-side request timeout (millseconds, or set a custom suffix like 10s)")
	APIFilterParamDesc         = ffm(language.AmericanEnglish, "api.filterParam", "Data filter field. Prefixes supported: > >= < <= @ ^ ! !@ !^")
	APIFilterSortDesc          = ffm(language.AmericanEnglish, "api.filterSort", "Sort field. For multi-field sort use comma separated values (or multiple query values) with '-' prefix for descending")
	APIFilterAscendingDesc     = ffm(language.AmericanEnglish, "api.filterAscending", "Ascending sort order (overrides all fields in a multi-field sort)")
	APIFilterDescendingDesc    = ffm(language.AmericanEnglish, "api.filterDescending", "Descending sort order (overrides all fields in a multi-field sort)")
	APIFilterSkipDesc          = ffm(language.AmericanEnglish, "api.filterSkip", "The number of records to skip (max: %d). Unsuitable for bulk operations")
	APIFilterLimitDesc         = ffm(language.AmericanEnglish, "api.filterLimit", "The maximum number of records to return (max: %d)")
	APIFilterCountDesc         = ffm(language.AmericanEnglish, "api.filterCount", "Return a total count as well as items (adds extra database processing)")
	APIFetchDataDesc           = ffm(language.AmericanEnglish, "api.fetchData", "Fetch the data and include it in the messages returned")
	APIConfirmQueryParam       = ffm(language.AmericanEnglish, "api.confirmQueryParam", "When true the HTTP request blocks until the message is confirmed")
	APIHistogramStartTimeParam = ffm(language.AmericanEnglish, "api.histogramStartTime", "Start time of the data to be fetched")
	APIHistogramEndTimeParam   = ffm(language.AmericanEnglish, "api.histogramEndTime", "End time of the data to be fetched")
	APIHistogramBucketsParam   = ffm(language.AmericanEnglish, "api.histogramBuckets", "Number of buckets between start time and end time")
	WebhooksOptJSON            = ffm(language.AmericanEnglish, "ws.options.json", "Whether to assume the response body is JSON, regardless of the returned Content-Type")
	WebhooksOptReply           = ffm(language.AmericanEnglish, "ws.options.reply", "Whether to automatically send a reply event, using the body returned by the webhook")
	WebhooksOptHeaders         = ffm(language.AmericanEnglish, "ws.options.headers", "Static headers to set on the webhook request")
	WebhooksOptQuery           = ffm(language.AmericanEnglish, "ws.options.query", "Static query params to set on the webhook request")
	WebhooksOptInput           = ffm(language.AmericanEnglish, "ws.options.input", "A set of options to extract data from the first JSON input data in the incoming message. Only applies if withData=true")
	WebhooksOptInputQuery      = ffm(language.AmericanEnglish, "ws.options.inputQuery", "A top-level property of the first data input, to use for query parameters")
	WebhooksOptInputHeaders    = ffm(language.AmericanEnglish, "ws.options.inputHeaders", "A top-level property of the first data input, to use for headers")
	WebhooksOptInputBody       = ffm(language.AmericanEnglish, "ws.options.inputBody", "A top-level property of the first data input, to use for the request body. Default is the whole first body")
	WebhooksOptFastAck         = ffm(language.AmericanEnglish, "ws.options.fastAck", "When true the event will be acknowledged before the webhook is invoked, allowing parallel invocations")
	WebhooksOptURL             = ffm(language.AmericanEnglish, "ws.options.url", "Webhook url to invoke. Can be relative if a base URL is set in the webhook plugin config")
	WebhooksOptMethod          = ffm(language.AmericanEnglish, "ws.options.method", "Webhook method to invoke. Default=POST")
	WebhooksOptReplyTag        = ffm(language.AmericanEnglish, "ws.options.replytype", "The tag to set on the reply message")
	WebhooksOptReplyTx         = ffm(language.AmericanEnglish, "ws.options.replyTX", "The transaction type to set on the reply message")
	WebhooksOptInputPath       = ffm(language.AmericanEnglish, "ws.options.inputPath", "A top-level property of the first data input, to use for a path to append with escaping to the webhook path")
	WebhooksOptInputReplyTx    = ffm(language.AmericanEnglish, "ws.options.inputReplyTX", "A top-level property of the first data input, to use to dynamically set whether to pin the response (so the requester can choose)")
)
