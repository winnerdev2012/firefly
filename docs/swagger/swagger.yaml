extensionprops: {}
openapi: 3.0.2
info:
  extensionprops: {}
  title: FireFly
  version: "1.0"
paths:
  /apis:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of contract APIs that have been published
      operationId: getContractAPIs
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the contract API
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Reference to the FireFly Interface definition
                                associated with the contract API
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: If this API is tied to an individual instance
                                of a smart contract, this field can include a blockchain
                                specific contract identifier. For example an Ethereum
                                contract address, or a Fabric chaincode name and channel
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this API to the network
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name that is used in the URL to access
                                the API
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the contract API
                          urls:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The URLs to use to access the API
                              properties:
                                openapi:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The URL to download the OpenAPI v3
                                      (Swagger) description for the API generated
                                      in JSON or YAML format
                                ui:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The URL to use in a web browser to
                                      access the SwaggerUI explorer/exerciser for
                                      the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates and broadcasts a new custom smart contract API
      operationId: postNewContractAPI
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Reference to the FireFly Interface definition
                          associated with the contract API
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: If this API is tied to an individual instance
                          of a smart contract, this field can include a blockchain
                          specific contract identifier. For example an Ethereum contract
                          address, or a Fabric chaincode name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name that is used in the URL to access the
                          API
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{apiName}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets information about a contract API, including the URLs for the
        OpenAPI Spec and Swagger UI for the API
      operationId: getContractAPIByName
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{apiName}/interface:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a contract interface for a contract API
      operationId: getContractAPIInterface
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{apiName}/invoke/{methodPath}:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Invokes a method on a smart contract API. Performs a blockchain
        transaction.
      operationId: postContractAPIInvoke
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: methodPath
          in: path
          description: The name or uniquely generated path name of a method on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{apiName}/listeners/{eventPath}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of contract listeners
      operationId: getContractAPIListeners
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: eventPath
          in: path
          description: The name or uniquely generated path name of a event on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: backendid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: location
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: signature
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          backendId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An ID assigned by the blockchain connector
                                to this listener
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the listener
                          event:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The definition of the event, either provided
                                in-line when creating the listener, or extracted from
                                the referenced FFI
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the smart contract listener
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A reference to an existing FFI, containing
                                pre-registered type information for the event
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: A blockchain specific contract identifier.
                                For example an Ethereum contract address, or a Fabric
                                chaincode name and channel
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A descriptive name for the listener
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener, which defines
                                the namespace of all blockchain events detected by
                                this listener
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Options that control how the listener subscribes
                                to events from the underlying blockchain
                              properties:
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A blockchain specific string, such
                                      as a block number, to start listening from.
                                      The special strings 'oldest' and 'newest' are
                                      supported by all blockchain connectors. Default
                                      is 'newest'
                          signature:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The stringified signature of the event,
                                as computed by the blockchain plugin
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A topic to set on the FireFly event that
                                is emitted each time a blockchain event is detected
                                from the blockchain. Setting this topic on a number
                                of listeners allows applications to easily subscribe
                                to all events they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a new blockchain listener for events emitted by custom
        smart contracts
      operationId: postContractAPIListeners
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: eventPath
          in: path
          description: The name or uniquely generated path name of a event on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A descriptive name for the listener
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Options that control how the listener subscribes
                          to events from the underlying blockchain
                        properties:
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A blockchain specific string, such as a
                                block number, to start listening from. The special
                                strings 'oldest' and 'newest' are supported by all
                                blockchain connectors. Default is 'newest'
                    topic:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A topic to set on the FireFly event that is emitted
                          each time a blockchain event is detected from the blockchain.
                          Setting this topic on a number of listeners allows applications
                          to easily subscribe to all events they need
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{apiName}/query/{methodPath}:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Queries a method on a smart contract API. Performs a read-only
        query.
      operationId: postContractAPIQuery
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: methodPath
          in: path
          description: The name or uniquely generated path name of a method on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /apis/{id}:
    extensionprops: {}
    put:
      extensionprops: {}
      tags:
      - Default Namespace
      description: The ID of the contract API
      operationId: putContractAPI
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Reference to the FireFly Interface definition
                          associated with the contract API
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: If this API is tied to an individual instance
                          of a smart contract, this field can include a blockchain
                          specific contract identifier. For example an Ethereum contract
                          address, or a Fabric chaincode name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name that is used in the URL to access the
                          API
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /batches:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of message batches
      operationId: getBatches
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: node
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: payloadref
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          confirmed:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time when the batch was confirmed
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the batch was sealed
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The privacy group the batch is sent to,
                                for private batches
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the manifest of the batch
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the batch
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          manifest:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The manifest of the batch
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the batch
                          node:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the node that generated the
                                batch
                          payloadRef:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For broadcast batches, this is the reference
                                to the binary batch in shared storage
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The FireFly transaction associated with
                                this batch
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the batch
                              enum:
                              - broadcast
                              - private
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /batches/{batchid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a message batch
      operationId: getBatchByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: batchid
          in: path
          description: The batch ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      author:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of identity of the submitter
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time when the batch was confirmed
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the batch was sealed
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The privacy group the batch is sent to, for
                            private batches
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the manifest of the batch
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The on-chain signing key used to sign the transaction
                      manifest:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The manifest of the batch
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the batch
                      node:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the node that generated the batch
                      payloadRef:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: For broadcast batches, this is the reference
                            to the binary batch in shared storage
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The FireFly transaction associated with this
                            batch
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the batch
                          enum:
                          - broadcast
                          - private
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /blockchainevents:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of blockchain events
      operationId: getBlockchainEvents
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: listener
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: source
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: timestamp
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.blockchainid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to the event by FireFly
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Detailed blockchain specific information
                                about the event, as generated by the blockchain connector
                          listener:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the listener that detected
                                this event, or nil for built-in events in the system
                                namespace
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event in the blockchain
                                smart contract
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener that detected
                                this blockchain event
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The data output by the event, parsed to
                                JSON according to the interface of the smart contract
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely on the blockchain (convention
                                for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                          source:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain plugin or token service
                                that detected the event
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time allocated to this event by the
                                blockchain. This is the block timestamp for most blockchain
                                connectors
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If this blockchain event is coorelated
                                to FireFly transaction such as a FireFly submitted
                                token transfer, this field is set to the UUID of the
                                FireFly transaction
                              properties:
                                blockchainId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The blockchain transaction ID, in
                                      the format specific to the blockchain involved
                                      in the transaction. Not all FireFly transactions
                                      include a blockchain
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /blockchainevents/{id}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a blockchain event
      operationId: getBlockchainEventByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: path
          description: The blockchain event ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID assigned to the event by FireFly
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Detailed blockchain specific information about
                            the event, as generated by the blockchain connector
                      listener:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the listener that detected this
                            event, or nil for built-in events in the system namespace
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the event in the blockchain smart
                            contract
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener that detected
                            this blockchain event
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The data output by the event, parsed to JSON
                            according to the interface of the smart contract
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely on the blockchain (convention for
                            plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                      source:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain plugin or token service that
                            detected the event
                      timestamp:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time allocated to this event by the blockchain.
                            This is the block timestamp for most blockchain connectors
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If this blockchain event is coorelated to FireFly
                            transaction such as a FireFly submitted token transfer,
                            this field is set to the UUID of the FireFly transaction
                          properties:
                            blockchainId:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The blockchain transaction ID, in the
                                  format specific to the blockchain involved in the
                                  transaction. Not all FireFly transactions include
                                  a blockchain
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /charts/histogram/{collection}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a JSON object containing statistics data that can be used
        to build a graphical representation of recent activity in a given database
        collection
      operationId: getChartHistogram
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: collection
          in: path
          description: The collection ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: startTime
          in: query
          description: Start time of the data to be fetched
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: endTime
          in: query
          description: End time of the data to be fetched
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: buckets
          in: query
          description: Number of buckets between start time and end time
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          count:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Total count of entries in this time bucket
                                within the histogram
                          isCapped:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Indicates whether there are more results
                                in this bucket that are not being displayed
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Starting timestamp for the bucket
                          types:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: Array of separate counts for individual
                                types of record within the bucket
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: Array of separate counts for individual
                                    types of record within the bucket
                                  properties:
                                    count:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: Count of entries of a given type
                                          within a bucket
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: Name of the type
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/interfaces:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of contract interfaces that have been published
      operationId: getContractInterfaces
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract this
                                FFI represents
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of smart contract event definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of smart contract event definitions
                                  properties:
                                    description:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A description of the smart contract
                                          event
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI event definition
                                    interface:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI smart contract
                                          definition that this event is part of
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the event
                                    namespace:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The namespace of the FFI
                                    params:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of event parameter/argument
                                          definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of event parameter/argument
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                                    pathname:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The unique name allocated to
                                          this event within the FFI for use on URL
                                          paths. Supports contracts that have multiple
                                          event overrides with the same name
                                    signature:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The stringified signature of
                                          the event, as computed by the blockchain
                                          plugin
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface (FFI)
                                smart contract definition
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this FFI to the network
                          methods:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of smart contract method definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of smart contract method definitions
                                  properties:
                                    description:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A description of the smart contract
                                          method
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI method definition
                                    interface:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI smart contract
                                          definition that this method is part of
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the method
                                    namespace:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The namespace of the FFI
                                    params:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of method parameter/argument
                                          definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of method parameter/argument
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                                    pathname:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The unique name allocated to
                                          this method within the FFI for use on URL
                                          paths. Supports contracts that have multiple
                                          method overrides with the same name
                                    returns:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of method return definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of method return
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FFI - usually matching
                                the smart contract name
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the FFI
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A version for the FFI - use of semantic
                                versioning such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates and broadcasts a new custom smart contract interface
      operationId: postNewContractInterface
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the smart contract this FFI
                          represents
                    events:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: An array of smart contract event definitions
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: An array of smart contract event definitions
                            properties:
                              description:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A description of the smart contract
                                    event
                              name:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The name of the event
                              params:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of event parameter/argument
                                    definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of event parameter/argument
                                        definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                    methods:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: An array of smart contract method definitions
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: An array of smart contract method definitions
                            properties:
                              description:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A description of the smart contract
                                    method
                              name:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The name of the method
                              params:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of method parameter/argument
                                    definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of method parameter/argument
                                        definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                              returns:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of method return definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of method return definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the FFI - usually matching the smart
                          contract name
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A version for the FFI - use of semantic versioning
                          such as 'v1.0.1' is encouraged
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/interfaces/{interfaceId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a contract interface by its ID
      operationId: getContractInterface
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: interfaceId
          in: path
          description: The ID of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: fetchchildren
          in: query
          description: When set, the API will return the full FireFly Interface document
            including all methods, events, and parameters
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/interfaces/{name}/{version}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a contract interface by its name and version
      operationId: getContractInterfaceByNameAndVersion
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: path
          description: The name of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: path
          description: The version of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: fetchchildren
          in: query
          description: When set, the API will return the full FireFly Interface document
            including all methods, events, and parameters
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/interfaces/generate:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: A convenience method to convert a blockchain specific smart contract
        format into a FireFly Interface format. The specific blockchain plugin in
        use must support this functionality.
      operationId: postGenerateContractInterface
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The description of the FFI to be generated. Defaults
                          to the description extracted by the blockchain specific
                          converter utility
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain connector specific payload. For
                          example in Ethereum this is a JSON structure containing
                          an 'abi' array, and optionally a 'devdocs' array.
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the FFI to generate
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace into which the FFI will be generated
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The version of the FFI to generate
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/invoke:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Invokes a method on a smart contract. Performs a blockchain transaction.
      operationId: postContractInvoke
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/listeners:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of contract listeners
      operationId: getContractListeners
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: backendid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: location
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: signature
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          backendId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An ID assigned by the blockchain connector
                                to this listener
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the listener
                          event:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The definition of the event, either provided
                                in-line when creating the listener, or extracted from
                                the referenced FFI
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the smart contract listener
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A reference to an existing FFI, containing
                                pre-registered type information for the event
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: A blockchain specific contract identifier.
                                For example an Ethereum contract address, or a Fabric
                                chaincode name and channel
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A descriptive name for the listener
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener, which defines
                                the namespace of all blockchain events detected by
                                this listener
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Options that control how the listener subscribes
                                to events from the underlying blockchain
                              properties:
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A blockchain specific string, such
                                      as a block number, to start listening from.
                                      The special strings 'oldest' and 'newest' are
                                      supported by all blockchain connectors. Default
                                      is 'newest'
                          signature:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The stringified signature of the event,
                                as computed by the blockchain plugin
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A topic to set on the FireFly event that
                                is emitted each time a blockchain event is detected
                                from the blockchain. Setting this topic on a number
                                of listeners allows applications to easily subscribe
                                to all events they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a new blockchain listener for events emitted by custom
        smart contracts
      operationId: postNewContractListener
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    event:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The definition of the event, either provided
                          in-line when creating the listener, or extracted from the
                          referenced FFI
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract event
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of event parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of event parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    eventPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: When creating a listener from an existing FFI,
                          this is the pathname of the event on that FFI to be detected
                          by this listener
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A reference to an existing FFI, containing pre-registered
                          type information for the event
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A descriptive name for the listener
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Options that control how the listener subscribes
                          to events from the underlying blockchain
                        properties:
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A blockchain specific string, such as a
                                block number, to start listening from. The special
                                strings 'oldest' and 'newest' are supported by all
                                blockchain connectors. Default is 'newest'
                    topic:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A topic to set on the FireFly event that is emitted
                          each time a blockchain event is detected from the blockchain.
                          Setting this topic on a number of listeners allows applications
                          to easily subscribe to all events they need
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/listeners/{nameOrId}:
    extensionprops: {}
    delete:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Deletes a contract listener referenced by its name or its ID
      operationId: deleteContractListener
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The contract listener name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "204":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a contract listener by its name or ID
      operationId: getContractListenerByNameOrID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The contract listener name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /contracts/query:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Queries a method on a smart contract. Performs a read-only query.
      operationId: postContractQuery
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /data:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of data items
      operationId: getData
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blob.hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.public
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.size
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: datatype.name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: datatype.version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: validator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blob:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An optional hash reference to a binary
                                blob attachment
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the binary blob data
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name field from the metadata
                                      attached to the blob, commonly used as a path/filename,
                                      and indexed for search
                                public:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If this data has been published to
                                      shared storage, this field is the id of the
                                      data in the shared storage plugin (IPFS hash
                                      etc.)
                                size:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    format: int64
                                    description: The size of the binary data
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the data resource
                          datatype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The optional datatype to use of validation
                                of this data
                              properties:
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the datatype
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the datatype. Semantic
                                      versioning is encouraged, such as v1.0.1
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the data resource. Derived
                                from the value and the hash of any binary blob attachment
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the data resource
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the data resource
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The data validator type
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The value for the data, stored in the FireFly
                                core database. Can be any JSON type - object, array,
                                string, number or boolean. Can be combined with a
                                binary blob attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a new data item in this FireFly node
      operationId: postData
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    datatype:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The optional datatype to use for validation of
                          the in-line data
                        properties:
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the datatype
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the datatype. Semantic versioning
                                is encouraged, such as v1.0.1
                    id:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of the referenced data resource
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The data validator type to use for in-line data
                    value:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: The in-line value for the data. Can be any JSON
                          type - object, array, string, number or boolean
            multipart/form-data:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    autometa:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    datatype.name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    datatype.version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    filename.ext:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: binary
                    metadata:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
      responses:
        "201":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blob:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: An optional hash reference to a binary blob
                            attachment
                          properties:
                            hash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: The hash of the binary blob data
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name field from the metadata attached
                                  to the blob, commonly used as a path/filename, and
                                  indexed for search
                            public:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: If this data has been published to shared
                                  storage, this field is the id of the data in the
                                  shared storage plugin (IPFS hash etc.)
                            size:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                format: int64
                                description: The size of the binary data
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the data resource
                      datatype:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The optional datatype to use of validation
                            of this data
                          properties:
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the datatype
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the datatype. Semantic
                                  versioning is encouraged, such as v1.0.1
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the data resource. Derived from
                            the value and the hash of any binary blob attachment
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the data resource
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the data resource
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The data validator type
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The value for the data, stored in the FireFly
                            core database. Can be any JSON type - object, array, string,
                            number or boolean. Can be combined with a binary blob
                            attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /data/{dataid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a data item by its ID, including metadata about this item
      operationId: getDataByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The data item ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blob:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: An optional hash reference to a binary blob
                            attachment
                          properties:
                            hash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: The hash of the binary blob data
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name field from the metadata attached
                                  to the blob, commonly used as a path/filename, and
                                  indexed for search
                            public:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: If this data has been published to shared
                                  storage, this field is the id of the data in the
                                  shared storage plugin (IPFS hash etc.)
                            size:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                format: int64
                                description: The size of the binary data
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the data resource
                      datatype:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The optional datatype to use of validation
                            of this data
                          properties:
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the datatype
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the datatype. Semantic
                                  versioning is encouraged, such as v1.0.1
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the data resource. Derived from
                            the value and the hash of any binary blob attachment
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the data resource
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the data resource
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The data validator type
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The value for the data, stored in the FireFly
                            core database. Can be any JSON type - object, array, string,
                            number or boolean. Can be combined with a binary blob
                            attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /data/{dataid}/blob:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Downloads the original file that was previously uploaded or received
      operationId: getDataBlob
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The blob ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: string
                    format: byte
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /data/{dataid}/messages:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of the messages associated with a data item
      operationId: getDataMsgs
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The data item ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /datatypes:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of datatypes that have been published
      operationId: getDatatypes
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: validator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the datatype was created
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the value, such as the JSON
                                schema. Allows all parties to be confident they have
                                the exact same rules for verifying data created against
                                a datatype
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the datatype
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this datatype to the network
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the datatype
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the datatype. Data resources
                                can only be created referencing datatypes in the same
                                namespace
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The validator that should be used to verify
                                this datatype
                              enum:
                              - json
                              - none
                              - definition
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The definition of the datatype, in the
                                syntax supported by the validator (such as a JSON
                                Schema definition)
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the datatype. Multiple versions
                                can exist with the same name. Use of semantic versioning
                                is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates and broadcasts a new datatype
      operationId: postNewDatatype
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the datatype
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The validator that should be used to verify this
                          datatype
                        enum:
                        - json
                        - none
                        - definition
                    value:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: The definition of the datatype, in the syntax
                          supported by the validator (such as a JSON Schema definition)
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The version of the datatype. Multiple versions
                          can exist with the same name. Use of semantic versioning
                          is encourages, such as v1.0.1
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /datatypes/{name}/{version}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a datatype by its name and version
      operationId: getDatatypeByName
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: path
          description: The name of the datatype
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: path
          description: The version of the datatype
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /events:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of events
      operationId: getEvents
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: fetchreferences
          in: query
          description: When set, the API will return the record that this item references
            in its 'ref' field
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: correlator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: reference
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          correlator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: For message events, this is the 'header.cid'
                                field from the referenced message. For certain other
                                event types, a secondary object is referenced such
                                as a token pool
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the event was emitted. Not guaranteed
                                to be unique, or to increase between events in the
                                same order as the final sequence events are delivered
                                to your application. As such, the 'sequence' field
                                should be used instead of the 'created' field for
                                querying events in the exact order they are delivered
                                to applications
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to this event by your
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the event. Your application
                                must subscribe to events within a namespace
                          reference:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of an resource that is the subject
                                of this event. The event type determines what type
                                of resource is referenced, and whether this field
                                might be unset
                          sequence:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: A sequence indicating the order in which
                                events are delivered to your application. Assure to
                                be unique per event in your local FireFly database
                                (unlike the created timestamp)
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A stream of information this event relates
                                to. For message confirmation events, a separate event
                                is emitted for each topic in the message. For blockchain
                                events, the listener specifies the topic. Rules exist
                                for how the topic is set for other event types
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a transaction that is event
                                is part of. Not all events are part of a transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: All interesting activity in FireFly is
                                emitted as a FireFly event, of a given type. The 'type'
                                combined with the 'reference' can be used to determine
                                how to process the event within your application
                              enum:
                              - transaction_submitted
                              - message_confirmed
                              - message_rejected
                              - namespace_confirmed
                              - datatype_confirmed
                              - identity_confirmed
                              - identity_updated
                              - token_pool_confirmed
                              - token_pool_op_failed
                              - token_transfer_confirmed
                              - token_transfer_op_failed
                              - token_approval_confirmed
                              - token_approval_op_failed
                              - contract_interface_confirmed
                              - contract_api_confirmed
                              - blockchain_event_received
                              - blockchain_invoke_op_succeeded
                              - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /events/{eid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets an event by its ID
      operationId: getEventByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: eid
          in: path
          description: The event ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      correlator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: For message events, this is the 'header.cid'
                            field from the referenced message. For certain other event
                            types, a secondary object is referenced such as a token
                            pool
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the event was emitted. Not guaranteed
                            to be unique, or to increase between events in the same
                            order as the final sequence events are delivered to your
                            application. As such, the 'sequence' field should be used
                            instead of the 'created' field for querying events in
                            the exact order they are delivered to applications
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID assigned to this event by your local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the event. Your application
                            must subscribe to events within a namespace
                      reference:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of an resource that is the subject
                            of this event. The event type determines what type of
                            resource is referenced, and whether this field might be
                            unset
                      sequence:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          format: int64
                          description: A sequence indicating the order in which events
                            are delivered to your application. Assure to be unique
                            per event in your local FireFly database (unlike the created
                            timestamp)
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A stream of information this event relates
                            to. For message confirmation events, a separate event
                            is emitted for each topic in the message. For blockchain
                            events, the listener specifies the topic. Rules exist
                            for how the topic is set for other event types
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a transaction that is event is
                            part of. Not all events are part of a transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: All interesting activity in FireFly is emitted
                            as a FireFly event, of a given type. The 'type' combined
                            with the 'reference' can be used to determine how to process
                            the event within your application
                          enum:
                          - transaction_submitted
                          - message_confirmed
                          - message_rejected
                          - namespace_confirmed
                          - datatype_confirmed
                          - identity_confirmed
                          - identity_updated
                          - token_pool_confirmed
                          - token_pool_op_failed
                          - token_transfer_confirmed
                          - token_transfer_op_failed
                          - token_approval_confirmed
                          - token_approval_op_failed
                          - contract_interface_confirmed
                          - contract_api_confirmed
                          - blockchain_event_received
                          - blockchain_invoke_op_succeeded
                          - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /groups:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of groups
      operationId: getGroups
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ledger
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time when the group was first used
                                to send a message in the network
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The identifier hash of this group. Derived
                                from the name and group members
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The list of members in this privacy group
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The list of members in this privacy
                                    group
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the node that receives
                                          a copy of the off-chain message for the
                                          identity
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The message used to broadcast this group
                                privately to the members
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The optional name of the group, allowing
                                multiple unique groups to exist with the same list
                                of recipients
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the group
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /groups/{hash}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a group by its ID (hash)
      operationId: getGroupByHash
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: path
          description: The hash of the group
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time when the group was first used to send
                            a message in the network
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The identifier hash of this group. Derived
                            from the name and group members
                      members:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of members in this privacy group
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of members in this privacy group
                              properties:
                                identity:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of the group member
                                node:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the node that receives
                                      a copy of the off-chain message for the identity
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The message used to broadcast this group privately
                            to the members
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The optional name of the group, allowing multiple
                            unique groups to exist with the same list of recipients
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the group
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /identities:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of all identities that have been registered in the
        namespace
      operationId: getIdentities
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
                          verifiers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The verifiers, such as blockchain signing
                                    keys, that have been bound to this identity and
                                    can be used to prove data orignates from that
                                    identity
                                  properties:
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The type of the verifier
                                        enum:
                                        - ethereum_address
                                        - fabric_msp_id
                                        - dx_peer_id
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The verifier string, such as
                                          an Ethereum address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Registers a new identity in the network
      operationId: postNewIdentity
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the identity. Part of the updatable
                          profile information of an identity
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key to use to make the
                          claim to the identity. Must be available to the local node
                          to sign the identity claim. Will become a verifier on the
                          established identity
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the identity. The name must be unique
                          within the type and namespace
                    parent:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: On input the parent can be specified directly
                          as the UUID of and existing identity, or as a DID to resolve
                          to that identity, or an organization name. The parent must
                          already have been registered, and its blockchain signing
                          key must be available to the local node to sign the verification
                    profile:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of the identity
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /identities/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets an identity by its DID
      operationId: getIdentityByDID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
                      verifiers:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The verifiers, such as blockchain signing keys,
                            that have been bound to this identity and can be used
                            to prove data orignates from that identity
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the verifier
                                    enum:
                                    - ethereum_address
                                    - fabric_msp_id
                                    - dx_peer_id
                                value:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The verifier string, such as an Ethereum
                                      address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /identities/{iid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets an identity by its ID
      operationId: getIdentityByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /identities/{iid}/did:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the DID for an identity based on its ID
      operationId: getIdentityDID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      '@context':
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#json-ld
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#json-ld
                      authentication:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                      verificationMethod:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                              properties:
                                blockchainAcountId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For blockchains like Ethereum that
                                      represent signing identities directly by their
                                      public key summarized in an account string
                                controller:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                dataExchangePeerID:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A string provided by your Data Exchange
                                      plugin, that it uses a technology specific mechanism
                                      to validate against when messages arrive from
                                      this identity
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                mspIdentityString:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For Hyperledger Fabric where the
                                      signing identity is represented by an MSP identifier
                                      (containing X509 certificate DN strings) that
                                      were validated by your local MSP
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /identities/{iid}/verifiers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the verifiers for an identity
      operationId: getIdentityVerifiers
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: identity
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time this verifier was created on this
                                node
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Hash used as a globally consistent identifier
                                for this namespace + type + value combination on every
                                node in the network
                          identity:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity that has
                                claimed this verifier
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the verifier
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the verifier
                              enum:
                              - ethereum_address
                              - fabric_msp_id
                              - dx_peer_id
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The verifier string, such as an Ethereum
                                address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of messages
      operationId: getMsgs
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: fetchdata
          in: query
          description: Fetch the data and include it in the messages returned
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          batch:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the batch in which the message
                                was pinned/transferred
                          confirmed:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The timestamp of when the message was confirmed/rejected
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The list of data elements attached to the
                                message
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The list of data elements attached
                                    to the message
                                  properties:
                                    hash:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: byte
                                        description: The hash of the referenced data
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the message. Derived from the
                                header, which includes the data hash
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                created:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: date-time
                                    description: The creation time of the message
                                datahash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: A single hash representing all data
                                      in the message. Derived from the array of data
                                      ids+hashes attached to this message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the message. Unique to
                                      each message
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the message
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                          pins:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: For private messages, a unique pin
                                    hash:nonce is assigned for each topic
                          state:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current state of the message
                              enum:
                              - staged
                              - ready
                              - sent
                              - pending
                              - confirmed
                              - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/{msgid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a message by its ID
      operationId: getMsgByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: fetchdata
          in: query
          description: Fetch the data and include it in the messages returned
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Allows you to specify details of the private
                            group of recipients in-line in the message. Alternative
                            to using the header.group to specify the hash of a group
                            that has been previously resolved
                          properties:
                            members:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of members of the group. If
                                  no identities local to the sending node are included,
                                  then the organization owner of the local node is
                                  added automatically
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    properties:
                                      identity:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The DID of the group member.
                                            On input can be a UUID or org name, and
                                            will be resolved to a DID
                                      node:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The UUID of the node that will
                                            receive a copy of the off-chain message
                                            for the identity. The first applicable
                                            node for the identity will be picked automatically
                                            on input if not specified
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Optional name for the group. Allows you
                                  to have multiple separate groups with the same list
                                  of participants
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/{msgid}/data:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the list of data items that are attached to a message
      operationId: getMsgData
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blob:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An optional hash reference to a binary
                                blob attachment
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the binary blob data
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name field from the metadata
                                      attached to the blob, commonly used as a path/filename,
                                      and indexed for search
                                public:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If this data has been published to
                                      shared storage, this field is the id of the
                                      data in the shared storage plugin (IPFS hash
                                      etc.)
                                size:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    format: int64
                                    description: The size of the binary data
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the data resource
                          datatype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The optional datatype to use of validation
                                of this data
                              properties:
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the datatype
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the datatype. Semantic
                                      versioning is encouraged, such as v1.0.1
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the data resource. Derived
                                from the value and the hash of any binary blob attachment
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the data resource
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the data resource
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The data validator type
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The value for the data, stored in the FireFly
                                core database. Can be any JSON type - object, array,
                                string, number or boolean. Can be combined with a
                                binary blob attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/{msgid}/events:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the list of events for a message
      operationId: getMsgEvents
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: correlator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: reference
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          correlator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: For message events, this is the 'header.cid'
                                field from the referenced message. For certain other
                                event types, a secondary object is referenced such
                                as a token pool
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the event was emitted. Not guaranteed
                                to be unique, or to increase between events in the
                                same order as the final sequence events are delivered
                                to your application. As such, the 'sequence' field
                                should be used instead of the 'created' field for
                                querying events in the exact order they are delivered
                                to applications
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to this event by your
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the event. Your application
                                must subscribe to events within a namespace
                          reference:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of an resource that is the subject
                                of this event. The event type determines what type
                                of resource is referenced, and whether this field
                                might be unset
                          sequence:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: A sequence indicating the order in which
                                events are delivered to your application. Assure to
                                be unique per event in your local FireFly database
                                (unlike the created timestamp)
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A stream of information this event relates
                                to. For message confirmation events, a separate event
                                is emitted for each topic in the message. For blockchain
                                events, the listener specifies the topic. Rules exist
                                for how the topic is set for other event types
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a transaction that is event
                                is part of. Not all events are part of a transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: All interesting activity in FireFly is
                                emitted as a FireFly event, of a given type. The 'type'
                                combined with the 'reference' can be used to determine
                                how to process the event within your application
                              enum:
                              - transaction_submitted
                              - message_confirmed
                              - message_rejected
                              - namespace_confirmed
                              - datatype_confirmed
                              - identity_confirmed
                              - identity_updated
                              - token_pool_confirmed
                              - token_pool_op_failed
                              - token_transfer_confirmed
                              - token_transfer_op_failed
                              - token_approval_confirmed
                              - token_approval_op_failed
                              - contract_interface_confirmed
                              - contract_api_confirmed
                              - blockchain_event_received
                              - blockchain_invoke_op_succeeded
                              - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/{msgid}/transaction:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the transaction for a message
      operationId: getMsgTxn
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blockchainIds:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The blockchain transaction ID, in the format
                            specific to the blockchain involved in the transaction.
                            Not all FireFly transactions include a blockchain. FireFly
                            transactions are extensible to support multiple blockchain
                            transactions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the transaction was created on this
                            node. Note the transaction is individually created with
                            the same UUID on each participant in the FireFly transaction
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the FireFly transaction
                          enum:
                          - none
                          - unpinned
                          - batch_pin
                          - token_pool
                          - token_transfer
                          - contract_invoke
                          - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/broadcast:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Broadcasts a message to all members in the network
      operationId: postNewMessageBroadcast
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/private:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Privately sends a message to one or more members in the network
      operationId: postNewMessagePrivate
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    group:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Allows you to specify details of the private
                          group of recipients in-line in the message. Alternative
                          to using the header.group to specify the hash of a group
                          that has been previously resolved
                        properties:
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of members of the group. If no
                                identities local to the sending node are included,
                                then the organization owner of the local node is added
                                automatically
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of members of the group. If
                                    no identities local to the sending node are included,
                                    then the organization owner of the local node
                                    is added automatically
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member.
                                          On input can be a UUID or org name, and
                                          will be resolved to a DID
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The UUID of the node that will
                                          receive a copy of the off-chain message
                                          for the identity. The first applicable node
                                          for the identity will be picked automatically
                                          on input if not specified
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Optional name for the group. Allows you
                                to have multiple separate groups with the same list
                                of participants
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Private messages only - the identifier
                                hash of the privacy group. Derived from the name and
                                member list of the group
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /messages/requestreply:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Sends a message with a blocking HTTP request, waits for a reply
        to that message, then sends the reply as the HTTP response.
      operationId: postNewMessageRequestReply
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    group:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Allows you to specify details of the private
                          group of recipients in-line in the message. Alternative
                          to using the header.group to specify the hash of a group
                          that has been previously resolved
                        properties:
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of members of the group. If no
                                identities local to the sending node are included,
                                then the organization owner of the local node is added
                                automatically
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of members of the group. If
                                    no identities local to the sending node are included,
                                    then the organization owner of the local node
                                    is added automatically
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member.
                                          On input can be a UUID or org name, and
                                          will be resolved to a DID
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The UUID of the node that will
                                          receive a copy of the off-chain message
                                          for the identity. The first applicable node
                                          for the identity will be picked automatically
                                          on input if not specified
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Optional name for the group. Allows you
                                to have multiple separate groups with the same list
                                of participants
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Private messages only - the identifier
                                hash of the privacy group. Derived from the name and
                                member list of the group
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Allows you to specify details of the private
                            group of recipients in-line in the message. Alternative
                            to using the header.group to specify the hash of a group
                            that has been previously resolved
                          properties:
                            members:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of members of the group. If
                                  no identities local to the sending node are included,
                                  then the organization owner of the local node is
                                  added automatically
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    properties:
                                      identity:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The DID of the group member.
                                            On input can be a UUID or org name, and
                                            will be resolved to a DID
                                      node:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The UUID of the node that will
                                            receive a copy of the off-chain message
                                            for the identity. The first applicable
                                            node for the identity will be picked automatically
                                            on input if not specified
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Optional name for the group. Allows you
                                  to have multiple separate groups with the same list
                                  of participants
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Global
      description: Gets a list of namespaces
      operationId: getNamespaces
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the namespace was created
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the namespace
                          fireflyContract:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Info on the FireFly smart contract configured
                                for this namespace
                              properties:
                                active:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The currently active FireFly smart
                                      contract
                                    properties:
                                      finalEvent:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The identifier for the final
                                            blockchain event received from this contract
                                            before termination
                                      index:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          description: The index of this contract
                                            in the config file
                                      info:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: object
                                          description: Blockchain-specific info on
                                            the contract, such as its location on
                                            chain
                                terminated:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: Previously-terminated FireFly smart
                                      contracts
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: Previously-terminated FireFly
                                          smart contracts
                                        properties:
                                          finalEvent:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The identifier for the
                                                final blockchain event received from
                                                this contract before termination
                                          index:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: integer
                                              description: The index of this contract
                                                in the config file
                                          info:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: object
                                              description: Blockchain-specific info
                                                on the contract, such as its location
                                                on chain
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the namespace. For locally
                                established namespaces will be different on each node
                                in the network. For broadcast namespaces, will be
                                the same on every node
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of broadcast message used to establish
                                the namespace. Unset for local namespaces
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace name
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the namespace
                              enum:
                              - local
                              - broadcast
                              - system
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Global
      description: Gets a namespace
      operationId: getNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the namespace was created
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the namespace
                      fireflyContract:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Info on the FireFly smart contract configured
                            for this namespace
                          properties:
                            active:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: The currently active FireFly smart contract
                                properties:
                                  finalEvent:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: The identifier for the final blockchain
                                        event received from this contract before termination
                                  index:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: integer
                                      description: The index of this contract in the
                                        config file
                                  info:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: Blockchain-specific info on the
                                        contract, such as its location on chain
                            terminated:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: Previously-terminated FireFly smart contracts
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Previously-terminated FireFly smart
                                      contracts
                                    properties:
                                      finalEvent:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The identifier for the final
                                            blockchain event received from this contract
                                            before termination
                                      index:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          description: The index of this contract
                                            in the config file
                                      info:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: object
                                          description: Blockchain-specific info on
                                            the contract, such as its location on
                                            chain
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the namespace. For locally established
                            namespaces will be different on each node in the network.
                            For broadcast namespaces, will be the same on every node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of broadcast message used to establish
                            the namespace. Unset for local namespaces
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace name
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the namespace
                          enum:
                          - local
                          - broadcast
                          - system
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of contract APIs that have been published
      operationId: getContractAPIsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the contract API
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Reference to the FireFly Interface definition
                                associated with the contract API
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: If this API is tied to an individual instance
                                of a smart contract, this field can include a blockchain
                                specific contract identifier. For example an Ethereum
                                contract address, or a Fabric chaincode name and channel
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this API to the network
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name that is used in the URL to access
                                the API
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the contract API
                          urls:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The URLs to use to access the API
                              properties:
                                openapi:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The URL to download the OpenAPI v3
                                      (Swagger) description for the API generated
                                      in JSON or YAML format
                                ui:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The URL to use in a web browser to
                                      access the SwaggerUI explorer/exerciser for
                                      the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates and broadcasts a new custom smart contract API
      operationId: postNewContractAPINamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Reference to the FireFly Interface definition
                          associated with the contract API
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: If this API is tied to an individual instance
                          of a smart contract, this field can include a blockchain
                          specific contract identifier. For example an Ethereum contract
                          address, or a Fabric chaincode name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name that is used in the URL to access the
                          API
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{apiName}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets information about a contract API, including the URLs for the
        OpenAPI Spec and Swagger UI for the API
      operationId: getContractAPIByNameNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{apiName}/interface:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a contract interface for a contract API
      operationId: getContractAPIInterfaceNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{apiName}/invoke/{methodPath}:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Invokes a method on a smart contract API. Performs a blockchain
        transaction.
      operationId: postContractAPIInvokeNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: methodPath
          in: path
          description: The name or uniquely generated path name of a method on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{apiName}/listeners/{eventPath}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of contract listeners
      operationId: getContractAPIListenersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: eventPath
          in: path
          description: The name or uniquely generated path name of a event on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: backendid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: location
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: signature
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          backendId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An ID assigned by the blockchain connector
                                to this listener
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the listener
                          event:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The definition of the event, either provided
                                in-line when creating the listener, or extracted from
                                the referenced FFI
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the smart contract listener
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A reference to an existing FFI, containing
                                pre-registered type information for the event
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: A blockchain specific contract identifier.
                                For example an Ethereum contract address, or a Fabric
                                chaincode name and channel
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A descriptive name for the listener
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener, which defines
                                the namespace of all blockchain events detected by
                                this listener
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Options that control how the listener subscribes
                                to events from the underlying blockchain
                              properties:
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A blockchain specific string, such
                                      as a block number, to start listening from.
                                      The special strings 'oldest' and 'newest' are
                                      supported by all blockchain connectors. Default
                                      is 'newest'
                          signature:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The stringified signature of the event,
                                as computed by the blockchain plugin
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A topic to set on the FireFly event that
                                is emitted each time a blockchain event is detected
                                from the blockchain. Setting this topic on a number
                                of listeners allows applications to easily subscribe
                                to all events they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a new blockchain listener for events emitted by custom
        smart contracts
      operationId: postContractAPIListenersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: eventPath
          in: path
          description: The name or uniquely generated path name of a event on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    event:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The definition of the event, either provided
                          in-line when creating the listener, or extracted from the
                          referenced FFI
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract event
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of event parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of event parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A reference to an existing FFI, containing pre-registered
                          type information for the event
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A descriptive name for the listener
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Options that control how the listener subscribes
                          to events from the underlying blockchain
                        properties:
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A blockchain specific string, such as a
                                block number, to start listening from. The special
                                strings 'oldest' and 'newest' are supported by all
                                blockchain connectors. Default is 'newest'
                    topic:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A topic to set on the FireFly event that is emitted
                          each time a blockchain event is detected from the blockchain.
                          Setting this topic on a number of listeners allows applications
                          to easily subscribe to all events they need
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{apiName}/query/{methodPath}:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Queries a method on a smart contract API. Performs a read-only
        query.
      operationId: postContractAPIQueryNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: apiName
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: methodPath
          in: path
          description: The name or uniquely generated path name of a method on a smart
            contract
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/apis/{id}:
    extensionprops: {}
    put:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: The ID of the contract API
      operationId: putContractAPINamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: path
          description: The name of the contract API
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Reference to the FireFly Interface definition
                          associated with the contract API
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: If this API is tied to an individual instance
                          of a smart contract, this field can include a blockchain
                          specific contract identifier. For example an Ethereum contract
                          address, or a Fabric chaincode name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name that is used in the URL to access the
                          API
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the contract API
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly Interface definition
                            associated with the contract API
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: If this API is tied to an individual instance
                            of a smart contract, this field can include a blockchain
                            specific contract identifier. For example an Ethereum
                            contract address, or a Fabric chaincode name and channel
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this API to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name that is used in the URL to access
                            the API
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the contract API
                      urls:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The URLs to use to access the API
                          properties:
                            openapi:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to download the OpenAPI v3 (Swagger)
                                  description for the API generated in JSON or YAML
                                  format
                            ui:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The URL to use in a web browser to access
                                  the SwaggerUI explorer/exerciser for the API
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/batches:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of message batches
      operationId: getBatchesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: node
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: payloadref
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          confirmed:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time when the batch was confirmed
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the batch was sealed
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The privacy group the batch is sent to,
                                for private batches
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the manifest of the batch
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the batch
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          manifest:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The manifest of the batch
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the batch
                          node:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the node that generated the
                                batch
                          payloadRef:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For broadcast batches, this is the reference
                                to the binary batch in shared storage
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The FireFly transaction associated with
                                this batch
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the batch
                              enum:
                              - broadcast
                              - private
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/batches/{batchid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a message batch
      operationId: getBatchByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: batchid
          in: path
          description: The batch ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      author:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of identity of the submitter
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time when the batch was confirmed
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the batch was sealed
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The privacy group the batch is sent to, for
                            private batches
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the manifest of the batch
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The on-chain signing key used to sign the transaction
                      manifest:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The manifest of the batch
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the batch
                      node:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the node that generated the batch
                      payloadRef:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: For broadcast batches, this is the reference
                            to the binary batch in shared storage
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The FireFly transaction associated with this
                            batch
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the batch
                          enum:
                          - broadcast
                          - private
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/blockchainevents:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of blockchain events
      operationId: getBlockchainEventsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: listener
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: source
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: timestamp
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.blockchainid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to the event by FireFly
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Detailed blockchain specific information
                                about the event, as generated by the blockchain connector
                          listener:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the listener that detected
                                this event, or nil for built-in events in the system
                                namespace
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event in the blockchain
                                smart contract
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener that detected
                                this blockchain event
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The data output by the event, parsed to
                                JSON according to the interface of the smart contract
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely on the blockchain (convention
                                for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                          source:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain plugin or token service
                                that detected the event
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time allocated to this event by the
                                blockchain. This is the block timestamp for most blockchain
                                connectors
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If this blockchain event is coorelated
                                to FireFly transaction such as a FireFly submitted
                                token transfer, this field is set to the UUID of the
                                FireFly transaction
                              properties:
                                blockchainId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The blockchain transaction ID, in
                                      the format specific to the blockchain involved
                                      in the transaction. Not all FireFly transactions
                                      include a blockchain
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/blockchainevents/{id}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a blockchain event
      operationId: getBlockchainEventByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: path
          description: The blockchain event ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID assigned to the event by FireFly
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Detailed blockchain specific information about
                            the event, as generated by the blockchain connector
                      listener:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the listener that detected this
                            event, or nil for built-in events in the system namespace
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the event in the blockchain smart
                            contract
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener that detected
                            this blockchain event
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The data output by the event, parsed to JSON
                            according to the interface of the smart contract
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely on the blockchain (convention for
                            plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                      source:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain plugin or token service that
                            detected the event
                      timestamp:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time allocated to this event by the blockchain.
                            This is the block timestamp for most blockchain connectors
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If this blockchain event is coorelated to FireFly
                            transaction such as a FireFly submitted token transfer,
                            this field is set to the UUID of the FireFly transaction
                          properties:
                            blockchainId:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The blockchain transaction ID, in the
                                  format specific to the blockchain involved in the
                                  transaction. Not all FireFly transactions include
                                  a blockchain
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/charts/histogram/{collection}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a JSON object containing statistics data that can be used
        to build a graphical representation of recent activity in a given database
        collection
      operationId: getChartHistogramNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: collection
          in: path
          description: The collection ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: startTime
          in: query
          description: Start time of the data to be fetched
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: endTime
          in: query
          description: End time of the data to be fetched
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: buckets
          in: query
          description: Number of buckets between start time and end time
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          count:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Total count of entries in this time bucket
                                within the histogram
                          isCapped:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Indicates whether there are more results
                                in this bucket that are not being displayed
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Starting timestamp for the bucket
                          types:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: Array of separate counts for individual
                                types of record within the bucket
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: Array of separate counts for individual
                                    types of record within the bucket
                                  properties:
                                    count:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: Count of entries of a given type
                                          within a bucket
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: Name of the type
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/interfaces:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of contract interfaces that have been published
      operationId: getContractInterfacesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract this
                                FFI represents
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of smart contract event definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of smart contract event definitions
                                  properties:
                                    description:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A description of the smart contract
                                          event
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI event definition
                                    interface:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI smart contract
                                          definition that this event is part of
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the event
                                    namespace:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The namespace of the FFI
                                    params:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of event parameter/argument
                                          definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of event parameter/argument
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                                    pathname:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The unique name allocated to
                                          this event within the FFI for use on URL
                                          paths. Supports contracts that have multiple
                                          event overrides with the same name
                                    signature:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The stringified signature of
                                          the event, as computed by the blockchain
                                          plugin
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface (FFI)
                                smart contract definition
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this FFI to the network
                          methods:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of smart contract method definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of smart contract method definitions
                                  properties:
                                    description:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A description of the smart contract
                                          method
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI method definition
                                    interface:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the FFI smart contract
                                          definition that this method is part of
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the method
                                    namespace:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The namespace of the FFI
                                    params:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of method parameter/argument
                                          definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of method parameter/argument
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                                    pathname:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The unique name allocated to
                                          this method within the FFI for use on URL
                                          paths. Supports contracts that have multiple
                                          method overrides with the same name
                                    returns:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: array
                                        description: An array of method return definitions
                                        items:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: object
                                            description: An array of method return
                                              definitions
                                            properties:
                                              name:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  type: string
                                                  description: The name of the parameter.
                                                    Note that parameters must be ordered
                                                    correctly on the FFI, according
                                                    to the order in the blockchain
                                                    smart contract
                                              schema:
                                                ref: ""
                                                value:
                                                  extensionprops: {}
                                                  description: FireFly uses an extended
                                                    subset of JSON Schema to describe
                                                    parameters, similar to OpenAPI/Swagger.
                                                    Converters are available for native
                                                    blockchain interface definitions
                                                    / type systems - such as an Ethereum
                                                    ABI. See the documentation for
                                                    more detail
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FFI - usually matching
                                the smart contract name
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the FFI
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A version for the FFI - use of semantic
                                versioning such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates and broadcasts a new custom smart contract interface
      operationId: postNewContractInterfaceNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the smart contract this FFI
                          represents
                    events:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: An array of smart contract event definitions
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: An array of smart contract event definitions
                            properties:
                              description:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A description of the smart contract
                                    event
                              name:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The name of the event
                              params:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of event parameter/argument
                                    definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of event parameter/argument
                                        definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                    methods:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: An array of smart contract method definitions
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: An array of smart contract method definitions
                            properties:
                              description:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A description of the smart contract
                                    method
                              name:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The name of the method
                              params:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of method parameter/argument
                                    definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of method parameter/argument
                                        definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                              returns:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: array
                                  description: An array of method return definitions
                                  items:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: object
                                      description: An array of method return definitions
                                      properties:
                                        name:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            type: string
                                            description: The name of the parameter.
                                              Note that parameters must be ordered
                                              correctly on the FFI, according to the
                                              order in the blockchain smart contract
                                        schema:
                                          ref: ""
                                          value:
                                            extensionprops: {}
                                            description: FireFly uses an extended
                                              subset of JSON Schema to describe parameters,
                                              similar to OpenAPI/Swagger. Converters
                                              are available for native blockchain
                                              interface definitions / type systems
                                              - such as an Ethereum ABI. See the documentation
                                              for more detail
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the FFI - usually matching the smart
                          contract name
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A version for the FFI - use of semantic versioning
                          such as 'v1.0.1' is encouraged
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/interfaces/{interfaceId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a contract interface by its ID
      operationId: getContractInterfaceNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: interfaceId
          in: path
          description: The ID of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchchildren
          in: query
          description: When set, the API will return the full FireFly Interface document
            including all methods, events, and parameters
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/interfaces/{name}/{version}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a contract interface by its name and version
      operationId: getContractInterfaceByNameAndVersionNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: path
          description: The name of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: path
          description: The version of the contract interface
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchchildren
          in: query
          description: When set, the API will return the full FireFly Interface document
            including all methods, events, and parameters
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/interfaces/generate:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: A convenience method to convert a blockchain specific smart contract
        format into a FireFly Interface format. The specific blockchain plugin in
        use must support this functionality.
      operationId: postGenerateContractInterfaceNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The description of the FFI to be generated. Defaults
                          to the description extracted by the blockchain specific
                          converter utility
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain connector specific payload. For
                          example in Ethereum this is a JSON structure containing
                          an 'abi' array, and optionally a 'devdocs' array.
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the FFI to generate
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace into which the FFI will be generated
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The version of the FFI to generate
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the smart contract this FFI
                            represents
                      events:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract event definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract event definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI event definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this event is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      event within the FFI for use on URL paths. Supports
                                      contracts that have multiple event overrides
                                      with the same name
                                signature:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The stringified signature of the
                                      event, as computed by the blockchain plugin
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly interface (FFI) smart
                            contract definition
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this FFI to the network
                      methods:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of smart contract method definitions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of smart contract method definitions
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      method
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI method definition
                                interface:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FFI smart contract
                                      definition that this method is part of
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the method
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the FFI
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                                pathname:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique name allocated to this
                                      method within the FFI for use on URL paths.
                                      Supports contracts that have multiple method
                                      overrides with the same name
                                returns:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of method return definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of method return definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the FFI - usually matching the
                            smart contract name
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FFI
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A version for the FFI - use of semantic versioning
                            such as 'v1.0.1' is encouraged
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/invoke:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Invokes a method on a smart contract. Performs a blockchain transaction.
      operationId: postContractInvokeNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/listeners:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of contract listeners
      operationId: getContractListenersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: backendid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: interface
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: location
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: signature
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          backendId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An ID assigned by the blockchain connector
                                to this listener
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the listener
                          event:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The definition of the event, either provided
                                in-line when creating the listener, or extracted from
                                the referenced FFI
                              properties:
                                description:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A description of the smart contract
                                      event
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the event
                                params:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of event parameter/argument
                                      definitions
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of event parameter/argument
                                          definitions
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the parameter.
                                                Note that parameters must be ordered
                                                correctly on the FFI, according to
                                                the order in the blockchain smart
                                                contract
                                          schema:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              description: FireFly uses an extended
                                                subset of JSON Schema to describe
                                                parameters, similar to OpenAPI/Swagger.
                                                Converters are available for native
                                                blockchain interface definitions /
                                                type systems - such as an Ethereum
                                                ABI. See the documentation for more
                                                detail
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the smart contract listener
                          interface:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A reference to an existing FFI, containing
                                pre-registered type information for the event
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly interface
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the FireFly interface
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the FireFly interface
                          location:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: A blockchain specific contract identifier.
                                For example an Ethereum contract address, or a Fabric
                                chaincode name and channel
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A descriptive name for the listener
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener, which defines
                                the namespace of all blockchain events detected by
                                this listener
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Options that control how the listener subscribes
                                to events from the underlying blockchain
                              properties:
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A blockchain specific string, such
                                      as a block number, to start listening from.
                                      The special strings 'oldest' and 'newest' are
                                      supported by all blockchain connectors. Default
                                      is 'newest'
                          signature:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The stringified signature of the event,
                                as computed by the blockchain plugin
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A topic to set on the FireFly event that
                                is emitted each time a blockchain event is detected
                                from the blockchain. Setting this topic on a number
                                of listeners allows applications to easily subscribe
                                to all events they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a new blockchain listener for events emitted by custom
        smart contracts
      operationId: postNewContractListenerNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    event:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The definition of the event, either provided
                          in-line when creating the listener, or extracted from the
                          referenced FFI
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract event
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of event parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of event parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    eventPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: When creating a listener from an existing FFI,
                          this is the pathname of the event on that FFI to be detected
                          by this listener
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A reference to an existing FFI, containing pre-registered
                          type information for the event
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly interface
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the FireFly interface
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the FireFly interface
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A descriptive name for the listener
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Options that control how the listener subscribes
                          to events from the underlying blockchain
                        properties:
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A blockchain specific string, such as a
                                block number, to start listening from. The special
                                strings 'oldest' and 'newest' are supported by all
                                blockchain connectors. Default is 'newest'
                    topic:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A topic to set on the FireFly event that is emitted
                          each time a blockchain event is detected from the blockchain.
                          Setting this topic on a number of listeners allows applications
                          to easily subscribe to all events they need
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/listeners/{nameOrId}:
    extensionprops: {}
    delete:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Deletes a contract listener referenced by its name or its ID
      operationId: deleteContractListenerNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The contract listener name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "204":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a contract listener by its name or ID
      operationId: getContractListenerByNameOrIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The contract listener name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      backendId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An ID assigned by the blockchain connector
                            to this listener
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the listener
                      event:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The definition of the event, either provided
                            in-line when creating the listener, or extracted from
                            the referenced FFI
                          properties:
                            description:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A description of the smart contract event
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the event
                            params:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of event parameter/argument
                                  definitions
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of event parameter/argument
                                      definitions
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the parameter.
                                            Note that parameters must be ordered correctly
                                            on the FFI, according to the order in
                                            the blockchain smart contract
                                      schema:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          description: FireFly uses an extended subset
                                            of JSON Schema to describe parameters,
                                            similar to OpenAPI/Swagger. Converters
                                            are available for native blockchain interface
                                            definitions / type systems - such as an
                                            Ethereum ABI. See the documentation for
                                            more detail
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the smart contract listener
                      interface:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A reference to an existing FFI, containing
                            pre-registered type information for the event
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly interface
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the FireFly interface
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the FireFly interface
                      location:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: A blockchain specific contract identifier.
                            For example an Ethereum contract address, or a Fabric
                            chaincode name and channel
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A descriptive name for the listener
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the listener, which defines
                            the namespace of all blockchain events detected by this
                            listener
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Options that control how the listener subscribes
                            to events from the underlying blockchain
                          properties:
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: A blockchain specific string, such as
                                  a block number, to start listening from. The special
                                  strings 'oldest' and 'newest' are supported by all
                                  blockchain connectors. Default is 'newest'
                      signature:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The stringified signature of the event, as
                            computed by the blockchain plugin
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A topic to set on the FireFly event that is
                            emitted each time a blockchain event is detected from
                            the blockchain. Setting this topic on a number of listeners
                            allows applications to easily subscribe to all events
                            they need
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/contracts/query:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Queries a method on a smart contract. Performs a read-only query.
      operationId: postContractQueryNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    input:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs. The name and type of each
                          input must be compatible with the FFI description of the
                          method, so that FireFly knows how to serialize it to the
                          blockchain via the connector
                    interface:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of a method within a pre-configured
                          FireFly interface (FFI) definition for a smart contract.
                          Required if the 'method' is omitted. Also see Contract APIs
                          as a way to configure a dedicated API for your FFI, including
                          all methods and an OpenAPI/Swagger interface
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key that will sign the
                          invocation. Defaults to the first signing key of the organization
                          that operates the node
                    location:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: A blockchain specific contract identifier. For
                          example an Ethereum contract address, or a Fabric chaincode
                          name and channel
                    method:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: An in-line FFI method definition for the method
                          to invoke. Required when FFI is not specified
                        properties:
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the smart contract method
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the method
                          params:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method parameter/argument definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method parameter/argument
                                    definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                          returns:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of method return definitions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of method return definitions
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the parameter. Note
                                          that parameters must be ordered correctly
                                          on the FFI, according to the order in the
                                          blockchain smart contract
                                    schema:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: FireFly uses an extended subset
                                          of JSON Schema to describe parameters, similar
                                          to OpenAPI/Swagger. Converters are available
                                          for native blockchain interface definitions
                                          / type systems - such as an Ethereum ABI.
                                          See the documentation for more detail
                    methodPath:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The pathname of the method on the specified FFI
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A map of named inputs that will be passed through
                          to the blockchain connector
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/data:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of data items
      operationId: getDataNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blob.hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.public
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blob.size
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: datatype.name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: datatype.version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: validator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blob:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An optional hash reference to a binary
                                blob attachment
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the binary blob data
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name field from the metadata
                                      attached to the blob, commonly used as a path/filename,
                                      and indexed for search
                                public:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If this data has been published to
                                      shared storage, this field is the id of the
                                      data in the shared storage plugin (IPFS hash
                                      etc.)
                                size:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    format: int64
                                    description: The size of the binary data
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the data resource
                          datatype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The optional datatype to use of validation
                                of this data
                              properties:
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the datatype
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the datatype. Semantic
                                      versioning is encouraged, such as v1.0.1
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the data resource. Derived
                                from the value and the hash of any binary blob attachment
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the data resource
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the data resource
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The data validator type
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The value for the data, stored in the FireFly
                                core database. Can be any JSON type - object, array,
                                string, number or boolean. Can be combined with a
                                binary blob attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a new data item in this FireFly node
      operationId: postDataNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    datatype:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The optional datatype to use for validation of
                          the in-line data
                        properties:
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the datatype
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the datatype. Semantic versioning
                                is encouraged, such as v1.0.1
                    id:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID of the referenced data resource
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The data validator type to use for in-line data
                    value:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: The in-line value for the data. Can be any JSON
                          type - object, array, string, number or boolean
            multipart/form-data:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    autometa:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    datatype.name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    datatype.version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    filename.ext:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: binary
                    metadata:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: Success
      responses:
        "201":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blob:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: An optional hash reference to a binary blob
                            attachment
                          properties:
                            hash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: The hash of the binary blob data
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name field from the metadata attached
                                  to the blob, commonly used as a path/filename, and
                                  indexed for search
                            public:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: If this data has been published to shared
                                  storage, this field is the id of the data in the
                                  shared storage plugin (IPFS hash etc.)
                            size:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                format: int64
                                description: The size of the binary data
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the data resource
                      datatype:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The optional datatype to use of validation
                            of this data
                          properties:
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the datatype
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the datatype. Semantic
                                  versioning is encouraged, such as v1.0.1
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the data resource. Derived from
                            the value and the hash of any binary blob attachment
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the data resource
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the data resource
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The data validator type
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The value for the data, stored in the FireFly
                            core database. Can be any JSON type - object, array, string,
                            number or boolean. Can be combined with a binary blob
                            attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/data/{dataid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a data item by its ID, including metadata about this item
      operationId: getDataByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The data item ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blob:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: An optional hash reference to a binary blob
                            attachment
                          properties:
                            hash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: The hash of the binary blob data
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name field from the metadata attached
                                  to the blob, commonly used as a path/filename, and
                                  indexed for search
                            public:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: If this data has been published to shared
                                  storage, this field is the id of the data in the
                                  shared storage plugin (IPFS hash etc.)
                            size:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                format: int64
                                description: The size of the binary data
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the data resource
                      datatype:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The optional datatype to use of validation
                            of this data
                          properties:
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the datatype
                            version:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The version of the datatype. Semantic
                                  versioning is encouraged, such as v1.0.1
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the data resource. Derived from
                            the value and the hash of any binary blob attachment
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the data resource
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the data resource
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The data validator type
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The value for the data, stored in the FireFly
                            core database. Can be any JSON type - object, array, string,
                            number or boolean. Can be combined with a binary blob
                            attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/data/{dataid}/blob:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Downloads the original file that was previously uploaded or received
      operationId: getDataBlobNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The blob ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: string
                    format: byte
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/data/{dataid}/messages:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of the messages associated with a data item
      operationId: getDataMsgsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: dataid
          in: path
          description: The data item ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/datatypes:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of datatypes that have been published
      operationId: getDatatypesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: validator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the datatype was created
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the value, such as the JSON
                                schema. Allows all parties to be confident they have
                                the exact same rules for verifying data created against
                                a datatype
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the datatype
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message that
                                was used to publish this datatype to the network
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the datatype
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the datatype. Data resources
                                can only be created referencing datatypes in the same
                                namespace
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The validator that should be used to verify
                                this datatype
                              enum:
                              - json
                              - none
                              - definition
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The definition of the datatype, in the
                                syntax supported by the validator (such as a JSON
                                Schema definition)
                          version:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The version of the datatype. Multiple versions
                                can exist with the same name. Use of semantic versioning
                                is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates and broadcasts a new datatype
      operationId: postNewDatatypeNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the datatype
                    validator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The validator that should be used to verify this
                          datatype
                        enum:
                        - json
                        - none
                        - definition
                    value:
                      ref: ""
                      value:
                        extensionprops: {}
                        description: The definition of the datatype, in the syntax
                          supported by the validator (such as a JSON Schema definition)
                    version:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The version of the datatype. Multiple versions
                          can exist with the same name. Use of semantic versioning
                          is encourages, such as v1.0.1
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/datatypes/{name}/{version}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a datatype by its name and version
      operationId: getDatatypeByNameNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: path
          description: The name of the datatype
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: version
          in: path
          description: The version of the datatype
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the datatype was created
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the value, such as the JSON schema.
                            Allows all parties to be confident they have the exact
                            same rules for verifying data created against a datatype
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the datatype
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message that was
                            used to publish this datatype to the network
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the datatype
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the datatype. Data resources
                            can only be created referencing datatypes in the same
                            namespace
                      validator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The validator that should be used to verify
                            this datatype
                          enum:
                          - json
                          - none
                          - definition
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          description: The definition of the datatype, in the syntax
                            supported by the validator (such as a JSON Schema definition)
                      version:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The version of the datatype. Multiple versions
                            can exist with the same name. Use of semantic versioning
                            is encourages, such as v1.0.1
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/events:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of events
      operationId: getEventsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchreferences
          in: query
          description: When set, the API will return the record that this item references
            in its 'ref' field
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: correlator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: reference
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          correlator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: For message events, this is the 'header.cid'
                                field from the referenced message. For certain other
                                event types, a secondary object is referenced such
                                as a token pool
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the event was emitted. Not guaranteed
                                to be unique, or to increase between events in the
                                same order as the final sequence events are delivered
                                to your application. As such, the 'sequence' field
                                should be used instead of the 'created' field for
                                querying events in the exact order they are delivered
                                to applications
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to this event by your
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the event. Your application
                                must subscribe to events within a namespace
                          reference:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of an resource that is the subject
                                of this event. The event type determines what type
                                of resource is referenced, and whether this field
                                might be unset
                          sequence:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: A sequence indicating the order in which
                                events are delivered to your application. Assure to
                                be unique per event in your local FireFly database
                                (unlike the created timestamp)
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A stream of information this event relates
                                to. For message confirmation events, a separate event
                                is emitted for each topic in the message. For blockchain
                                events, the listener specifies the topic. Rules exist
                                for how the topic is set for other event types
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a transaction that is event
                                is part of. Not all events are part of a transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: All interesting activity in FireFly is
                                emitted as a FireFly event, of a given type. The 'type'
                                combined with the 'reference' can be used to determine
                                how to process the event within your application
                              enum:
                              - transaction_submitted
                              - message_confirmed
                              - message_rejected
                              - namespace_confirmed
                              - datatype_confirmed
                              - identity_confirmed
                              - identity_updated
                              - token_pool_confirmed
                              - token_pool_op_failed
                              - token_transfer_confirmed
                              - token_transfer_op_failed
                              - token_approval_confirmed
                              - token_approval_op_failed
                              - contract_interface_confirmed
                              - contract_api_confirmed
                              - blockchain_event_received
                              - blockchain_invoke_op_succeeded
                              - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/events/{eid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets an event by its ID
      operationId: getEventByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: eid
          in: path
          description: The event ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      correlator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: For message events, this is the 'header.cid'
                            field from the referenced message. For certain other event
                            types, a secondary object is referenced such as a token
                            pool
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the event was emitted. Not guaranteed
                            to be unique, or to increase between events in the same
                            order as the final sequence events are delivered to your
                            application. As such, the 'sequence' field should be used
                            instead of the 'created' field for querying events in
                            the exact order they are delivered to applications
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID assigned to this event by your local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the event. Your application
                            must subscribe to events within a namespace
                      reference:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of an resource that is the subject
                            of this event. The event type determines what type of
                            resource is referenced, and whether this field might be
                            unset
                      sequence:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          format: int64
                          description: A sequence indicating the order in which events
                            are delivered to your application. Assure to be unique
                            per event in your local FireFly database (unlike the created
                            timestamp)
                      topic:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A stream of information this event relates
                            to. For message confirmation events, a separate event
                            is emitted for each topic in the message. For blockchain
                            events, the listener specifies the topic. Rules exist
                            for how the topic is set for other event types
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a transaction that is event is
                            part of. Not all events are part of a transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: All interesting activity in FireFly is emitted
                            as a FireFly event, of a given type. The 'type' combined
                            with the 'reference' can be used to determine how to process
                            the event within your application
                          enum:
                          - transaction_submitted
                          - message_confirmed
                          - message_rejected
                          - namespace_confirmed
                          - datatype_confirmed
                          - identity_confirmed
                          - identity_updated
                          - token_pool_confirmed
                          - token_pool_op_failed
                          - token_transfer_confirmed
                          - token_transfer_op_failed
                          - token_approval_confirmed
                          - token_approval_op_failed
                          - contract_interface_confirmed
                          - contract_api_confirmed
                          - blockchain_event_received
                          - blockchain_invoke_op_succeeded
                          - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/groups:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of groups
      operationId: getGroupsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ledger
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time when the group was first used
                                to send a message in the network
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The identifier hash of this group. Derived
                                from the name and group members
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The list of members in this privacy group
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The list of members in this privacy
                                    group
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the node that receives
                                          a copy of the off-chain message for the
                                          identity
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The message used to broadcast this group
                                privately to the members
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The optional name of the group, allowing
                                multiple unique groups to exist with the same list
                                of recipients
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the group
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/groups/{hash}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a group by its ID (hash)
      operationId: getGroupByHashNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: path
          description: The hash of the group
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time when the group was first used to send
                            a message in the network
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The identifier hash of this group. Derived
                            from the name and group members
                      members:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of members in this privacy group
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of members in this privacy group
                              properties:
                                identity:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of the group member
                                node:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the node that receives
                                      a copy of the off-chain message for the identity
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The message used to broadcast this group privately
                            to the members
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The optional name of the group, allowing multiple
                            unique groups to exist with the same list of recipients
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the group
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/identities:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of all identities that have been registered in the
        namespace
      operationId: getIdentitiesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
                          verifiers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The verifiers, such as blockchain signing
                                    keys, that have been bound to this identity and
                                    can be used to prove data orignates from that
                                    identity
                                  properties:
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The type of the verifier
                                        enum:
                                        - ethereum_address
                                        - fabric_msp_id
                                        - dx_peer_id
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The verifier string, such as
                                          an Ethereum address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Registers a new identity in the network
      operationId: postNewIdentityNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the identity. Part of the updatable
                          profile information of an identity
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key to use to make the
                          claim to the identity. Must be available to the local node
                          to sign the identity claim. Will become a verifier on the
                          established identity
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the identity. The name must be unique
                          within the type and namespace
                    parent:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: On input the parent can be specified directly
                          as the UUID of and existing identity, or as a DID to resolve
                          to that identity, or an organization name. The parent must
                          already have been registered, and its blockchain signing
                          key must be available to the local node to sign the verification
                    profile:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of the identity
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/identities/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets an identity by its DID
      operationId: getIdentityByDIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
                      verifiers:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The verifiers, such as blockchain signing keys,
                            that have been bound to this identity and can be used
                            to prove data orignates from that identity
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the verifier
                                    enum:
                                    - ethereum_address
                                    - fabric_msp_id
                                    - dx_peer_id
                                value:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The verifier string, such as an Ethereum
                                      address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/identities/{iid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets an identity by its ID
      operationId: getIdentityByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/identities/{iid}/did:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the DID for an identity based on its ID
      operationId: getIdentityDIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      '@context':
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#json-ld
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#json-ld
                      authentication:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                      verificationMethod:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                              properties:
                                blockchainAcountId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For blockchains like Ethereum that
                                      represent signing identities directly by their
                                      public key summarized in an account string
                                controller:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                dataExchangePeerID:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A string provided by your Data Exchange
                                      plugin, that it uses a technology specific mechanism
                                      to validate against when messages arrive from
                                      this identity
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                mspIdentityString:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For Hyperledger Fabric where the
                                      signing identity is represented by an MSP identifier
                                      (containing X509 certificate DN strings) that
                                      were validated by your local MSP
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/identities/{iid}/verifiers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the verifiers for an identity
      operationId: getIdentityVerifiersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: iid
          in: path
          description: The identity ID, which is a UUID generated by FireFly
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: id
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: identity
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time this verifier was created on this
                                node
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Hash used as a globally consistent identifier
                                for this namespace + type + value combination on every
                                node in the network
                          identity:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity that has
                                claimed this verifier
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the verifier
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the verifier
                              enum:
                              - ethereum_address
                              - fabric_msp_id
                              - dx_peer_id
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The verifier string, such as an Ethereum
                                address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of messages
      operationId: getMsgsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchdata
          in: query
          description: Fetch the data and include it in the messages returned
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: author
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: cid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: confirmed
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: group
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pins
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tag
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topics
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: txtype
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          batch:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the batch in which the message
                                was pinned/transferred
                          confirmed:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The timestamp of when the message was confirmed/rejected
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The list of data elements attached to the
                                message
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The list of data elements attached
                                    to the message
                                  properties:
                                    hash:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: byte
                                        description: The hash of the referenced data
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the message. Derived from the
                                header, which includes the data hash
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                created:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: date-time
                                    description: The creation time of the message
                                datahash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: A single hash representing all data
                                      in the message. Derived from the array of data
                                      ids+hashes attached to this message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the message. Unique to
                                      each message
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                namespace:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The namespace of the message
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                          pins:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: For private messages, a unique pin
                                    hash:nonce is assigned for each topic
                          state:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current state of the message
                              enum:
                              - staged
                              - ready
                              - sent
                              - pending
                              - confirmed
                              - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/{msgid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a message by its ID
      operationId: getMsgByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchdata
          in: query
          description: Fetch the data and include it in the messages returned
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Allows you to specify details of the private
                            group of recipients in-line in the message. Alternative
                            to using the header.group to specify the hash of a group
                            that has been previously resolved
                          properties:
                            members:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of members of the group. If
                                  no identities local to the sending node are included,
                                  then the organization owner of the local node is
                                  added automatically
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    properties:
                                      identity:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The DID of the group member.
                                            On input can be a UUID or org name, and
                                            will be resolved to a DID
                                      node:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The UUID of the node that will
                                            receive a copy of the off-chain message
                                            for the identity. The first applicable
                                            node for the identity will be picked automatically
                                            on input if not specified
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Optional name for the group. Allows you
                                  to have multiple separate groups with the same list
                                  of participants
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/{msgid}/data:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the list of data items that are attached to a message
      operationId: getMsgDataNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blob:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An optional hash reference to a binary
                                blob attachment
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the binary blob data
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name field from the metadata
                                      attached to the blob, commonly used as a path/filename,
                                      and indexed for search
                                public:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If this data has been published to
                                      shared storage, this field is the id of the
                                      data in the shared storage plugin (IPFS hash
                                      etc.)
                                size:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    format: int64
                                    description: The size of the binary data
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the data resource
                          datatype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The optional datatype to use of validation
                                of this data
                              properties:
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the datatype
                                version:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The version of the datatype. Semantic
                                      versioning is encouraged, such as v1.0.1
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of the data resource. Derived
                                from the value and the hash of any binary blob attachment
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the data resource
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the data resource
                          validator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The data validator type
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              description: The value for the data, stored in the FireFly
                                core database. Can be any JSON type - object, array,
                                string, number or boolean. Can be combined with a
                                binary blob attachment
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/{msgid}/events:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the list of events for a message
      operationId: getMsgEventsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: correlator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: reference
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: topic
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          correlator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: For message events, this is the 'header.cid'
                                field from the referenced message. For certain other
                                event types, a secondary object is referenced such
                                as a token pool
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the event was emitted. Not guaranteed
                                to be unique, or to increase between events in the
                                same order as the final sequence events are delivered
                                to your application. As such, the 'sequence' field
                                should be used instead of the 'created' field for
                                querying events in the exact order they are delivered
                                to applications
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to this event by your
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the event. Your application
                                must subscribe to events within a namespace
                          reference:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of an resource that is the subject
                                of this event. The event type determines what type
                                of resource is referenced, and whether this field
                                might be unset
                          sequence:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: A sequence indicating the order in which
                                events are delivered to your application. Assure to
                                be unique per event in your local FireFly database
                                (unlike the created timestamp)
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A stream of information this event relates
                                to. For message confirmation events, a separate event
                                is emitted for each topic in the message. For blockchain
                                events, the listener specifies the topic. Rules exist
                                for how the topic is set for other event types
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a transaction that is event
                                is part of. Not all events are part of a transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: All interesting activity in FireFly is
                                emitted as a FireFly event, of a given type. The 'type'
                                combined with the 'reference' can be used to determine
                                how to process the event within your application
                              enum:
                              - transaction_submitted
                              - message_confirmed
                              - message_rejected
                              - namespace_confirmed
                              - datatype_confirmed
                              - identity_confirmed
                              - identity_updated
                              - token_pool_confirmed
                              - token_pool_op_failed
                              - token_transfer_confirmed
                              - token_transfer_op_failed
                              - token_approval_confirmed
                              - token_approval_op_failed
                              - contract_interface_confirmed
                              - contract_api_confirmed
                              - blockchain_event_received
                              - blockchain_invoke_op_succeeded
                              - blockchain_invoke_op_failed
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/{msgid}/transaction:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the transaction for a message
      operationId: getMsgTxnNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: msgid
          in: path
          description: The message ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blockchainIds:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The blockchain transaction ID, in the format
                            specific to the blockchain involved in the transaction.
                            Not all FireFly transactions include a blockchain. FireFly
                            transactions are extensible to support multiple blockchain
                            transactions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the transaction was created on this
                            node. Note the transaction is individually created with
                            the same UUID on each participant in the FireFly transaction
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the FireFly transaction
                          enum:
                          - none
                          - unpinned
                          - batch_pin
                          - token_pool
                          - token_transfer
                          - contract_invoke
                          - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/broadcast:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Broadcasts a message to all members in the network
      operationId: postNewMessageBroadcastNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    group:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Allows you to specify details of the private
                          group of recipients in-line in the message. Alternative
                          to using the header.group to specify the hash of a group
                          that has been previously resolved
                        properties:
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of members of the group. If no
                                identities local to the sending node are included,
                                then the organization owner of the local node is added
                                automatically
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of members of the group. If
                                    no identities local to the sending node are included,
                                    then the organization owner of the local node
                                    is added automatically
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member.
                                          On input can be a UUID or org name, and
                                          will be resolved to a DID
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The UUID of the node that will
                                          receive a copy of the off-chain message
                                          for the identity. The first applicable node
                                          for the identity will be picked automatically
                                          on input if not specified
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Optional name for the group. Allows you
                                to have multiple separate groups with the same list
                                of participants
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Private messages only - the identifier
                                hash of the privacy group. Derived from the name and
                                member list of the group
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/private:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Privately sends a message to one or more members in the network
      operationId: postNewMessagePrivateNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    group:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Allows you to specify details of the private
                          group of recipients in-line in the message. Alternative
                          to using the header.group to specify the hash of a group
                          that has been previously resolved
                        properties:
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of members of the group. If no
                                identities local to the sending node are included,
                                then the organization owner of the local node is added
                                automatically
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of members of the group. If
                                    no identities local to the sending node are included,
                                    then the organization owner of the local node
                                    is added automatically
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member.
                                          On input can be a UUID or org name, and
                                          will be resolved to a DID
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The UUID of the node that will
                                          receive a copy of the off-chain message
                                          for the identity. The first applicable node
                                          for the identity will be picked automatically
                                          on input if not specified
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Optional name for the group. Allows you
                                to have multiple separate groups with the same list
                                of participants
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Private messages only - the identifier
                                hash of the privacy group. Derived from the name and
                                member list of the group
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/messages/requestreply:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Sends a message with a blocking HTTP request, waits for a reply
        to that message, then sends the reply as the HTTP response.
      operationId: postNewMessageRequestReplyNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    data:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: array
                        description: For input allows you to specify data in-line
                          in the message, that will be turned into data attachments.
                          For output when fetchdata is used on API calls, includes
                          the in-line data payloads of all data attachments
                        items:
                          ref: ""
                          value:
                            extensionprops: {}
                            type: object
                            description: For input allows you to specify data in-line
                              in the message, that will be turned into data attachments.
                              For output when fetchdata is used on API calls, includes
                              the in-line data payloads of all data attachments
                            properties:
                              datatype:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The optional datatype to use for validation
                                    of the in-line data
                                  properties:
                                    name:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The name of the datatype
                                    version:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The version of the datatype.
                                          Semantic versioning is encouraged, such
                                          as v1.0.1
                              id:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  format: uuid
                                  description: The UUID of the referenced data resource
                              validator:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The data validator type to use for
                                    in-line data
                              value:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  description: The in-line value for the data. Can
                                    be any JSON type - object, array, string, number
                                    or boolean
                    group:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Allows you to specify details of the private
                          group of recipients in-line in the message. Alternative
                          to using the header.group to specify the hash of a group
                          that has been previously resolved
                        properties:
                          members:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: An array of members of the group. If no
                                identities local to the sending node are included,
                                then the organization owner of the local node is added
                                automatically
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: An array of members of the group. If
                                    no identities local to the sending node are included,
                                    then the organization owner of the local node
                                    is added automatically
                                  properties:
                                    identity:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The DID of the group member.
                                          On input can be a UUID or org name, and
                                          will be resolved to a DID
                                    node:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The UUID of the node that will
                                          receive a copy of the off-chain message
                                          for the identity. The first applicable node
                                          for the identity will be picked automatically
                                          on input if not specified
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Optional name for the group. Allows you
                                to have multiple separate groups with the same list
                                of participants
                    header:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: The message header contains all fields that are
                          used to build the message hash
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of identity of the submitter
                          cid:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The correlation ID of the message. Set
                                this when a message is a response to another message
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Private messages only - the identifier
                                hash of the privacy group. Derived from the name and
                                member list of the group
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The on-chain signing key used to sign the
                                transaction
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The message tag indicates the purpose of
                                the message to the applications that process it
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: A message topic associates this message
                                with an ordered stream of data. A custom topic should
                                be assigned - using the default topic is discouraged
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: A message topic associates this message
                                    with an ordered stream of data. A custom topic
                                    should be assigned - using the default topic is
                                    discouraged
                          txtype:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transaction used to order/deliver
                                this message
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the message
                              enum:
                              - definition
                              - broadcast
                              - private
                              - groupinit
                              - transfer_broadcast
                              - transfer_private
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      batch:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the batch in which the message
                            was pinned/transferred
                      confirmed:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The timestamp of when the message was confirmed/rejected
                      data:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The list of data elements attached to the message
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The list of data elements attached to the
                                message
                              properties:
                                hash:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: The hash of the referenced data
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the referenced data resource
                      group:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Allows you to specify details of the private
                            group of recipients in-line in the message. Alternative
                            to using the header.group to specify the hash of a group
                            that has been previously resolved
                          properties:
                            members:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: An array of members of the group. If
                                  no identities local to the sending node are included,
                                  then the organization owner of the local node is
                                  added automatically
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    properties:
                                      identity:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The DID of the group member.
                                            On input can be a UUID or org name, and
                                            will be resolved to a DID
                                      node:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The UUID of the node that will
                                            receive a copy of the off-chain message
                                            for the identity. The first applicable
                                            node for the identity will be picked automatically
                                            on input if not specified
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Optional name for the group. Allows you
                                  to have multiple separate groups with the same list
                                  of participants
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of the message. Derived from the header,
                            which includes the data hash
                      header:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The message header contains all fields that
                            are used to build the message hash
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of identity of the submitter
                            cid:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The correlation ID of the message. Set
                                  this when a message is a response to another message
                            created:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: date-time
                                description: The creation time of the message
                            datahash:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: A single hash representing all data in
                                  the message. Derived from the array of data ids+hashes
                                  attached to this message
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: byte
                                description: Private messages only - the identifier
                                  hash of the privacy group. Derived from the name
                                  and member list of the group
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the message. Unique to each
                                  message
                            key:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The on-chain signing key used to sign
                                  the transaction
                            namespace:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The namespace of the message
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The message tag indicates the purpose
                                  of the message to the applications that process
                                  it
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: A message topic associates this message
                                  with an ordered stream of data. A custom topic should
                                  be assigned - using the default topic is discouraged
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                            txtype:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of transaction used to order/deliver
                                  this message
                                enum:
                                - none
                                - unpinned
                                - batch_pin
                                - token_pool
                                - token_transfer
                                - contract_invoke
                                - token_approval
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the message
                                enum:
                                - definition
                                - broadcast
                                - private
                                - groupinit
                                - transfer_broadcast
                                - transfer_private
                      pins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: For private messages, a unique pin hash:nonce
                            is assigned for each topic
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: For private messages, a unique pin hash:nonce
                                is assigned for each topic
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the message
                          enum:
                          - staged
                          - ready
                          - sent
                          - pending
                          - confirmed
                          - rejected
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/action:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Notify all nodes in the network of a new governance action
      operationId: postNetworkActionNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The action to be performed
                        enum:
                        - terminate
      responses:
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The action to be performed
                          enum:
                          - terminate
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/diddocs/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a DID document by its DID
      operationId: getNetworkDIDDocByDIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      '@context':
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#json-ld
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#json-ld
                      authentication:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                      verificationMethod:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                              properties:
                                blockchainAcountId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For blockchains like Ethereum that
                                      represent signing identities directly by their
                                      public key summarized in an account string
                                controller:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                dataExchangePeerID:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A string provided by your Data Exchange
                                      plugin, that it uses a technology specific mechanism
                                      to validate against when messages arrive from
                                      this identity
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                mspIdentityString:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For Hyperledger Fabric where the
                                      signing identity is represented by an MSP identifier
                                      (containing X509 certificate DN strings) that
                                      were validated by your local MSP
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/identities:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the list of identities in the network (deprecated - use /identities
        instead of /network/identities
      operationId: getNetworkIdentitiesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
                          verifiers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The verifiers, such as blockchain signing
                                    keys, that have been bound to this identity and
                                    can be used to prove data orignates from that
                                    identity
                                  properties:
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The type of the verifier
                                        enum:
                                        - ethereum_address
                                        - fabric_msp_id
                                        - dx_peer_id
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The verifier string, such as
                                          an Ethereum address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
      deprecated: true
  /namespaces/{ns}/network/identities/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets an identity by its DID (deprecated - use /identities/{did}
        instead of /network/identities/{did})
      operationId: getNetworkIdentityByDIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
                      verifiers:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The verifiers, such as blockchain signing keys,
                            that have been bound to this identity and can be used
                            to prove data orignates from that identity
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the verifier
                                    enum:
                                    - ethereum_address
                                    - fabric_msp_id
                                    - dx_peer_id
                                value:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The verifier string, such as an Ethereum
                                      address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
      deprecated: true
  /namespaces/{ns}/network/nodes:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of nodes in the network
      operationId: getNetworkNodesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/nodes/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets information about a specific node in the network
      operationId: getNetworkNodeNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The name or ID of the node
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/nodes/self:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Instructs this FireFly node to register itself on the network
      operationId: postNodesSelfNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/organizations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of orgs in the network
      operationId: getNetworkOrgsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Registers a new org in the network
      operationId: postNewOrganizationNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the identity. Part of the updatable
                          profile information of an identity
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key to use to make the
                          claim to the identity. Must be available to the local node
                          to sign the identity claim. Will become a verifier on the
                          established identity
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the identity. The name must be unique
                          within the type and namespace
                    parent:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: On input the parent can be specified directly
                          as the UUID of and existing identity, or as a DID to resolve
                          to that identity, or an organization name. The parent must
                          already have been registered, and its blockchain signing
                          key must be available to the local node to sign the verification
                    profile:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of the identity
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/organizations/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets information about a specifc org in the network
      operationId: getNetworkOrgNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The name or ID of the org
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/network/organizations/self:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Instructs this FireFly node to register its org on the network
      operationId: postNewOrganizationSelfNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/operations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a a list of operations
      operationId: getOpsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: error
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: input
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: output
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: plugin
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: retry
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: status
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the operation was created
                          error:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Any error reported back from the plugin
                                for this operation
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the operation
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The input to this operation
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the operation
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Any output reported back from the plugin
                                for this operation
                          plugin:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The plugin responsible for performing the
                                operation
                          retry:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: If this operation was initiated as a retry
                                to a previous operation, this field points to the
                                UUID of the operation being retried
                          status:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current status of the operation
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction the
                                operation is part of
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the operation
                              enum:
                              - blockchain_pin_batch
                              - blockchain_invoke
                              - sharedstorage_upload_batch
                              - sharedstorage_upload_blob
                              - sharedstorage_download_batch
                              - sharedstorage_download_blob
                              - dataexchange_send_batch
                              - dataexchange_send_blob
                              - token_create_pool
                              - token_activate_pool
                              - token_transfer
                              - token_approval
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/operations/{opid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets an operation by ID
      operationId: getOpByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: opid
          in: path
          description: The operation ID key to get
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/operations/{opid}/retry:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Retries a failed operation
      operationId: postOpRetryNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: opid
          in: path
          description: The UUID of the operation
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/status:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the status of this node
      operationId: getStatusNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace that this status applies to
                      node:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Details of the local node
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the node, if registered
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of this node, as specified in
                                  the local configuration
                            registered:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether the node has been successfully
                                  registered
                      org:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Details of the organization identity that operates
                            this node
                          properties:
                            did:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of the organization identity,
                                  if registered
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the organization, if registered
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the node operator organization,
                                  as specified in the local configuration
                            registered:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether the organization has been successfully
                                  registered
                            verifiers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: Array of verifiers (blockchain keys)
                                  owned by this identity
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Array of verifiers (blockchain keys)
                                      owned by this identity
                                    properties:
                                      type:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the verifier
                                          enum:
                                          - ethereum_address
                                          - fabric_msp_id
                                          - dx_peer_id
                                      value:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The verifier string, such as
                                            an Ethereum address, or Fabric MSP identifier
                      plugins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Information about plugins configured on this
                            node
                          properties:
                            blockchain:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The blockchain plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The blockchain plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            dataExchange:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The data exchange plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The data exchange plugins on this
                                      node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            database:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The database plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The database plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The event plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The event plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            identity:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The identity plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The identity plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            sharedStorage:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The shared storage plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The shared storage plugins on this
                                      node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            tokens:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The token plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The token plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/subscriptions:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of subscriptions
      operationId: getSubscriptionsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: events
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: filters
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: options
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: transport
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Creation time of the subscription
                          ephemeral:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Ephemeral subscriptions only exist as long
                                as the application is connected, and as such will
                                miss events that occur while the application is disconnected,
                                and cannot be created administratively. You can create
                                one over over a connected WebSocket connection
                          filter:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Server-side filter to apply to events
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.author''
                                      instead'
                                blockchainevent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to blockchain events.
                                      If an event is not a blockchain event, these
                                      filters are ignored
                                    properties:
                                      listener:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the blockchain event 'listener' field,
                                            which is the UUID of the event listener.
                                            So you can restrict your subscription
                                            to certain blockchain listeners. Alternatively
                                            to avoid your application need to know
                                            listener UUIDs you can set the 'topic'
                                            field of blockchain event listeners, and
                                            use a topic filter on your subscriptions
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the blockchain event 'name' field,
                                            which is the name of the event in the
                                            underlying blockchain smart contract
                                events:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      event type, to subscribe to a subset of event
                                      types
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.group''
                                      instead'
                                message:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to message events.
                                      If an event is not a message event, these filters
                                      are ignored
                                    properties:
                                      author:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.author' field
                                      group:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.group' field
                                      tag:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.tag' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.tag''
                                      instead'
                                topic:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      topic of the event, to subscribe to a subset
                                      of topics. Note for messages sent with multiple
                                      topics, a separate event is emitted for each
                                      topic
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''topic''
                                      instead'
                                transaction:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to events with a
                                      transaction. If an event is not associated with
                                      a transaction, this filter is ignored
                                    properties:
                                      type:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the transaction 'type' field
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the subscription
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the subscription. The application
                                specifies this name when it connects, in order to
                                attach to the subscription and receive events that
                                arrived while it was disconnected. If multiple apps
                                connect to the same subscription, events are workload
                                balanced across the connected application instances
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the subscription. A subscription
                                will only receive events generated in the namespace
                                of the subscription
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Subscription options
                              properties:
                                fastack:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: When true the event
                                      will be acknowledged before the webhook is invoked,
                                      allowing parallel invocations'
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Whether your appplication would like
                                      to receive events from the 'oldest' event emitted
                                      by your FireFly node (from the beginning of
                                      time), or the 'newest' event (from now), or
                                      a specific event sequence. Default is 'newest'
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: Static headers to
                                      set on the webhook request'
                                input:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: A set of options
                                      to extract data from the first JSON input data
                                      in the incoming message. Only applies if withData=true'
                                    properties:
                                      body:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for the request
                                            body. Default is the whole first body
                                      headers:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for headers
                                      path:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for a path to
                                            append with escaping to the webhook path
                                      query:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for query parameters
                                      replytx:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use to dynamically
                                            set whether to pin the response (so the
                                            requester can choose)
                                json:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: Whether to assume
                                      the response body is JSON, regardless of the
                                      returned Content-Type'
                                method:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: HTTP method to invoke.
                                      Default=POST'
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: Static query params
                                      to set on the webhook request'
                                readAhead:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    description: The number of events to stream ahead
                                      to your application, while waiting for confirmation
                                      of consumption of those events. At least once
                                      delivery semantics are used in FireFly, so if
                                      your application crashes/reconnects this is
                                      the maximum number of events you would expect
                                      to be redelivered after it restarts
                                    minimum: 0
                                    maximum: 65535
                                reply:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: Whether to automatically
                                      send a reply event, using the body returned
                                      by the webhook'
                                replytag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: The tag to set on
                                      the reply message'
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: The transaction type
                                      to set on the reply message'
                                url:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: HTTP url to invoke.
                                      Can be relative if a base URL is set in the
                                      webhook plugin config'
                                withData:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: Whether message events delivered
                                      over the subscription, should be packaged with
                                      the full data of those messages in-line as part
                                      of the event JSON payload. Or if the application
                                      should make separate REST calls to download
                                      that data. May not be supported on some transports.
                          transport:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The transport plugin responsible for event
                                delivery (WebSockets, Webhooks, JMS, NATS etc.)
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a new subscription for an application to receive events
        from FireFly
      operationId: postNewSubscriptionNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    filter:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Server-side filter to apply to events
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.author''
                                instead'
                          blockchainevent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to blockchain events.
                                If an event is not a blockchain event, these filters
                                are ignored
                              properties:
                                listener:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'listener' field, which is
                                      the UUID of the event listener. So you can restrict
                                      your subscription to certain blockchain listeners.
                                      Alternatively to avoid your application need
                                      to know listener UUIDs you can set the 'topic'
                                      field of blockchain event listeners, and use
                                      a topic filter on your subscriptions
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'name' field, which is the
                                      name of the event in the underlying blockchain
                                      smart contract
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the event
                                type, to subscribe to a subset of event types
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.group''
                                instead'
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to message events. If
                                an event is not a message event, these filters are
                                ignored
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.author' field
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.group' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.tag' field
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.tag''
                                instead'
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the topic
                                of the event, to subscribe to a subset of topics.
                                Note for messages sent with multiple topics, a separate
                                event is emitted for each topic
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''topic'' instead'
                          transaction:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to events with a transaction.
                                If an event is not associated with a transaction,
                                this filter is ignored
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      transaction 'type' field
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the subscription. The application
                          specifies this name when it connects, in order to attach
                          to the subscription and receive events that arrived while
                          it was disconnected. If multiple apps connect to the same
                          subscription, events are workload balanced across the connected
                          application instances
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace of the subscription. A subscription
                          will only receive events generated in the namespace of the
                          subscription
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Subscription options
                        properties:
                          fastack:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: When true the event will
                                be acknowledged before the webhook is invoked, allowing
                                parallel invocations'
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Whether your appplication would like to
                                receive events from the 'oldest' event emitted by
                                your FireFly node (from the beginning of time), or
                                the 'newest' event (from now), or a specific event
                                sequence. Default is 'newest'
                          headers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static headers to set on
                                the webhook request'
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: A set of options to extract
                                data from the first JSON input data in the incoming
                                message. Only applies if withData=true'
                              properties:
                                body:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for the request body. Default
                                      is the whole first body
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for headers
                                path:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for a path to append with
                                      escaping to the webhook path
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for query parameters
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use to dynamically set whether
                                      to pin the response (so the requester can choose)
                          json:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to assume the response
                                body is JSON, regardless of the returned Content-Type'
                          method:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP method to invoke.
                                Default=POST'
                          query:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static query params to
                                set on the webhook request'
                          readAhead:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: The number of events to stream ahead to
                                your application, while waiting for confirmation of
                                consumption of those events. At least once delivery
                                semantics are used in FireFly, so if your application
                                crashes/reconnects this is the maximum number of events
                                you would expect to be redelivered after it restarts
                              minimum: 0
                              maximum: 65535
                          reply:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to automatically
                                send a reply event, using the body returned by the
                                webhook'
                          replytag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The tag to set on the reply
                                message'
                          replytx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The transaction type to
                                set on the reply message'
                          url:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP url to invoke. Can
                                be relative if a base URL is set in the webhook plugin
                                config'
                          withData:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether message events delivered over the
                                subscription, should be packaged with the full data
                                of those messages in-line as part of the event JSON
                                payload. Or if the application should make separate
                                REST calls to download that data. May not be supported
                                on some transports.
                    transport:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The transport plugin responsible for event delivery
                          (WebSockets, Webhooks, JMS, NATS etc.)
      responses:
        "201":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    put:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Update an existing subscription
      operationId: putSubscriptionNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    filter:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Server-side filter to apply to events
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.author''
                                instead'
                          blockchainevent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to blockchain events.
                                If an event is not a blockchain event, these filters
                                are ignored
                              properties:
                                listener:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'listener' field, which is
                                      the UUID of the event listener. So you can restrict
                                      your subscription to certain blockchain listeners.
                                      Alternatively to avoid your application need
                                      to know listener UUIDs you can set the 'topic'
                                      field of blockchain event listeners, and use
                                      a topic filter on your subscriptions
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'name' field, which is the
                                      name of the event in the underlying blockchain
                                      smart contract
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the event
                                type, to subscribe to a subset of event types
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.group''
                                instead'
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to message events. If
                                an event is not a message event, these filters are
                                ignored
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.author' field
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.group' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.tag' field
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.tag''
                                instead'
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the topic
                                of the event, to subscribe to a subset of topics.
                                Note for messages sent with multiple topics, a separate
                                event is emitted for each topic
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''topic'' instead'
                          transaction:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to events with a transaction.
                                If an event is not associated with a transaction,
                                this filter is ignored
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      transaction 'type' field
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the subscription. The application
                          specifies this name when it connects, in order to attach
                          to the subscription and receive events that arrived while
                          it was disconnected. If multiple apps connect to the same
                          subscription, events are workload balanced across the connected
                          application instances
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace of the subscription. A subscription
                          will only receive events generated in the namespace of the
                          subscription
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Subscription options
                        properties:
                          fastack:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: When true the event will
                                be acknowledged before the webhook is invoked, allowing
                                parallel invocations'
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Whether your appplication would like to
                                receive events from the 'oldest' event emitted by
                                your FireFly node (from the beginning of time), or
                                the 'newest' event (from now), or a specific event
                                sequence. Default is 'newest'
                          headers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static headers to set on
                                the webhook request'
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: A set of options to extract
                                data from the first JSON input data in the incoming
                                message. Only applies if withData=true'
                              properties:
                                body:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for the request body. Default
                                      is the whole first body
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for headers
                                path:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for a path to append with
                                      escaping to the webhook path
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for query parameters
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use to dynamically set whether
                                      to pin the response (so the requester can choose)
                          json:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to assume the response
                                body is JSON, regardless of the returned Content-Type'
                          method:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP method to invoke.
                                Default=POST'
                          query:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static query params to
                                set on the webhook request'
                          readAhead:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: The number of events to stream ahead to
                                your application, while waiting for confirmation of
                                consumption of those events. At least once delivery
                                semantics are used in FireFly, so if your application
                                crashes/reconnects this is the maximum number of events
                                you would expect to be redelivered after it restarts
                              minimum: 0
                              maximum: 65535
                          reply:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to automatically
                                send a reply event, using the body returned by the
                                webhook'
                          replytag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The tag to set on the reply
                                message'
                          replytx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The transaction type to
                                set on the reply message'
                          url:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP url to invoke. Can
                                be relative if a base URL is set in the webhook plugin
                                config'
                          withData:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether message events delivered over the
                                subscription, should be packaged with the full data
                                of those messages in-line as part of the event JSON
                                payload. Or if the application should make separate
                                REST calls to download that data. May not be supported
                                on some transports.
                    transport:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The transport plugin responsible for event delivery
                          (WebSockets, Webhooks, JMS, NATS etc.)
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/subscriptions/{subid}:
    extensionprops: {}
    delete:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Deletes a subscription
      operationId: deleteSubscriptionNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: subid
          in: path
          description: The subscription ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "204":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a subscription by its ID
      operationId: getSubscriptionByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: subid
          in: path
          description: The subscription ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/accounts:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token accounts
      operationId: getTokenAccountsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing identity this balance
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/accounts/{key}/pools:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token pools that contain a given token account key
      operationId: getTokenAccountPoolsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: path
          description: The key for the token account. The exact format may vary based
            on the token connector use.
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this balance entry
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/approvals:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token approvals
      operationId: getTokenApprovalsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: active
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: approved
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainevent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: localid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: operator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: subject
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          active:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Indicates if this approval is currently
                                active (only one approval can be active per subject)
                          approved:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether this record grants permission for
                                an operator to perform actions on the token balance
                                (true), or revokes permission (false)
                          blockchainEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the blockchain event
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file. Required on
                                input when there are more than one token connectors
                                configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the token approval
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Token connector specific information about
                                the approval operation, such as whether it applied
                                to a limited balance of a fungible token. See your
                                chosen token connector documentation for details
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing key for the approval
                                request. On input defaults to the first signing key
                                of the organization that operates the node
                          localId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of this token approval, in the
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the approval, which must
                                match the namespace of the token pool
                          operator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain identity that is granted
                                the approval
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this approval applies
                                to
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely with respect to the
                                blockchain
                          subject:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A string identifying the parties and entities
                                in the scope of this approval, as provided by the
                                token connector
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If submitted via FireFly, this will reference
                                the UUID of the FireFly transaction (if the token
                                connector in use supports attaching data)
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a token approval
      operationId: postTokenApprovalNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    approved:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: boolean
                        description: Whether this record grants permission for an
                          operator to perform actions on the token balance (true),
                          or revokes permission (false)
                    config:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Input only field, with token connector specific
                          configuration of the approval.  See your chosen token connector
                          documentation for details
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the approval request.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    operator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain identity that is granted the approval
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID the token pool this approval applies
                          to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      active:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Indicates if this approval is currently active
                            (only one approval can be active per subject)
                      approved:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Whether this record grants permission for an
                            operator to perform actions on the token balance (true),
                            or revokes permission (false)
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the token approval
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the approval operation, such as whether it applied to
                            a limited balance of a fungible token. See your chosen
                            token connector documentation for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the approval
                            request. On input defaults to the first signing key of
                            the organization that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token approval, in the local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the approval, which must
                            match the namespace of the token pool
                      operator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain identity that is granted the
                            approval
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this approval applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      subject:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A string identifying the parties and entities
                            in the scope of this approval, as provided by the token
                            connector
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      active:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Indicates if this approval is currently active
                            (only one approval can be active per subject)
                      approved:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Whether this record grants permission for an
                            operator to perform actions on the token balance (true),
                            or revokes permission (false)
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the token approval
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the approval operation, such as whether it applied to
                            a limited balance of a fungible token. See your chosen
                            token connector documentation for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the approval
                            request. On input defaults to the first signing key of
                            the organization that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token approval, in the local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the approval, which must
                            match the namespace of the token pool
                      operator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain identity that is granted the
                            approval
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this approval applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      subject:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A string identifying the parties and entities
                            in the scope of this approval, as provided by the token
                            connector
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/balances:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token balances
      operationId: getTokenBalancesNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: balance
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tokenindex
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: uri
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          balance:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The numeric balance. For non-fungible tokens
                                will always be 1. For fungible tokens, the number
                                of decimals for the token pool should be considered
                                when interpreting the balance. For example, with 18
                                decimals a fractional balance of 10.234 will be returned
                                as 10,234,000,000,000,000,000
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The token connector that is responsible
                                for the token pool of this balance entry
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing identity this balance
                                applies to
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the token pool for this
                                balance entry
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this balance entry
                                applies to
                          tokenIndex:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The index of the token within the pool
                                that this balance applies to
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last time the balance was updated by
                                applying a transfer event
                          uri:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The URI of the token this balance entry
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/burn:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Burns some tokens
      operationId: postTokenBurnNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    from:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The source account for the transfer. On input
                          defaults to the value of 'key'
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    to:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The target account for the transfer. On input
                          defaults to the value of 'key'
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/connectors:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the list of token connectors currently in use
      operationId: getTokenConnectorsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as configured
                                in the FireFly core configuration file
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/mint:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Mints some tokens
      operationId: postTokenMintNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    from:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The source account for the transfer. On input
                          defaults to the value of 'key'
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    to:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The target account for the transfer. On input
                          defaults to the value of 'key'
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/pools:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token pools
      operationId: getTokenPoolsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: decimals
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: locator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: standard
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: symbol
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file that is responsible
                                for the token pool. Required on input when multiple
                                token connectors are configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the pool
                          decimals:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: Number of decimal places that this token
                                has
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the token pool
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Token connector specific information about
                                the pool. See your chosen token connector documentation
                                for details
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The signing key used to create the token
                                pool. On input for token connectors that support on-chain
                                deployment of new tokens (vs. only index existing
                                ones) this determines the signing key used to create
                                the token on-chain
                          locator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A unique identifier for the pool, as provided
                                by the token connector
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message used
                                to inform the network to index this pool
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token pool. Note the name
                                is not validated against the description of the token
                                on the blockchain
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the token pool
                          standard:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The ERC standard the token pool conforms
                                to, as reported by the token connector
                          state:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current state of the token pool
                              enum:
                              - unknown
                              - pending
                              - confirmed
                          symbol:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The token symbol. If supplied on input
                                for an existing on-chain token, this must match the
                                on-chain information
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Reference to the FireFly transaction used
                                to create and broadcast this pool to the network
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of token the pool contains, such
                                as fungible/non-fungible
                              enum:
                              - fungible
                              - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Creates a new token pool
      operationId: postTokenPoolNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    config:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Input only field, with token connector specific
                          configuration of the pool, such as an existing Ethereum
                          address and block number to used to index the pool. See
                          your chosen token connector documentation for details
                    connector:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the token connector, as specified
                          in the FireFly core configuration file that is responsible
                          for the token pool. Required on input when multiple token
                          connectors are configured
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The signing key used to create the token pool.
                          On input for token connectors that support on-chain deployment
                          of new tokens (vs. only index existing ones) this determines
                          the signing key used to create the token on-chain
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the token pool. Note the name is
                          not validated against the description of the token on the
                          blockchain
                    symbol:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The token symbol. If supplied on input for an
                          existing on-chain token, this must match the on-chain information
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of token the pool contains, such as
                          fungible/non-fungible
                        enum:
                        - fungible
                        - nonfungible
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/pools/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a token pool by its name or its ID
      operationId: getTokenPoolByNameOrIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The token pool name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/transfers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of token transfers
      operationId: getTokenTransfersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: fromOrTo
          in: query
          description: The sending or receiving token account for a token transfer
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: amount
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainevent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: from
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: localid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messagehash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: to
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tokenindex
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: uri
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          amount:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The amount for the transfer. For non-fungible
                                tokens will always be 1. For fungible tokens, the
                                number of decimals for the token pool should be considered
                                when inputting the amount. For example, with 18 decimals
                                a fractional balance of 10.234 will be specified as
                                10,234,000,000,000,000,000
                          blockchainEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the blockchain event
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file. Required on
                                input when there are more than one token connectors
                                configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the transfer
                          from:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The source account for the transfer. On
                                input defaults to the value of 'key'
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing key for the transfer.
                                On input defaults to the first signing key of the
                                organization that operates the node
                          localId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of this token transfer, in the
                                local FireFly node
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a message that has been correlated
                                with this transfer using the data field of the transfer
                                in a compatible token connector
                          messageHash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of a message that has been correlated
                                with this transfer using the data field of the transfer
                                in a compatible token connector
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the transfer, which must
                                match the namespace of the token pool
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this transfer applies
                                to
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely with respect to the
                                blockchain
                          to:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The target account for the transfer. On
                                input defaults to the value of 'key'
                          tokenIndex:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The index of the token within the pool
                                that this transfer applies to
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If submitted via FireFly, this will reference
                                the UUID of the FireFly transaction (if the token
                                connector in use supports attaching data)
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transfer such as mint/burn/transfer
                              enum:
                              - mint
                              - burn
                              - transfer
                          uri:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The URI of the token this transfer applies
                                to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Transfers some tokens
      operationId: postTokenTransferNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    from:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The source account for the transfer. On input
                          defaults to the value of 'key'
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    to:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The target account for the transfer. On input
                          defaults to the value of 'key'
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/tokens/transfers/{transferId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a token transfer by its ID
      operationId: getTokenTransferByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: transferId
          in: path
          description: The token transfer ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/transactions:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of transactions
      operationId: getTxnsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainids
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blockchainIds:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The blockchain transaction ID, in the
                                    format specific to the blockchain involved in
                                    the transaction. Not all FireFly transactions
                                    include a blockchain. FireFly transactions are
                                    extensible to support multiple blockchain transactions
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the transaction was created on
                                this node. Note the transaction is individually created
                                with the same UUID on each participant in the FireFly
                                transaction
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the FireFly transaction
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/transactions/{txnid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a transaction by its ID
      operationId: getTxnByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainids
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blockchainIds:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The blockchain transaction ID, in the format
                            specific to the blockchain involved in the transaction.
                            Not all FireFly transactions include a blockchain. FireFly
                            transactions are extensible to support multiple blockchain
                            transactions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the transaction was created on this
                            node. Note the transaction is individually created with
                            the same UUID on each participant in the FireFly transaction
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the FireFly transaction
                          enum:
                          - none
                          - unpinned
                          - batch_pin
                          - token_pool
                          - token_transfer
                          - contract_invoke
                          - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/transactions/{txnid}/blockchainevents:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list blockchain events for a specific transaction
      operationId: getTxnBlockchainEventsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to the event by FireFly
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Detailed blockchain specific information
                                about the event, as generated by the blockchain connector
                          listener:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the listener that detected
                                this event, or nil for built-in events in the system
                                namespace
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event in the blockchain
                                smart contract
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener that detected
                                this blockchain event
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The data output by the event, parsed to
                                JSON according to the interface of the smart contract
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely on the blockchain (convention
                                for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                          source:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain plugin or token service
                                that detected the event
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time allocated to this event by the
                                blockchain. This is the block timestamp for most blockchain
                                connectors
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If this blockchain event is coorelated
                                to FireFly transaction such as a FireFly submitted
                                token transfer, this field is set to the UUID of the
                                FireFly transaction
                              properties:
                                blockchainId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The blockchain transaction ID, in
                                      the format specific to the blockchain involved
                                      in the transaction. Not all FireFly transactions
                                      include a blockchain
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/transactions/{txnid}/operations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of operations in a specific transaction
      operationId: getTxnOpsNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the operation was created
                          error:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Any error reported back from the plugin
                                for this operation
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the operation
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The input to this operation
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the operation
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Any output reported back from the plugin
                                for this operation
                          plugin:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The plugin responsible for performing the
                                operation
                          retry:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: If this operation was initiated as a retry
                                to a previous operation, this field points to the
                                UUID of the operation being retried
                          status:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current status of the operation
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction the
                                operation is part of
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the operation
                              enum:
                              - blockchain_pin_batch
                              - blockchain_invoke
                              - sharedstorage_upload_batch
                              - sharedstorage_upload_blob
                              - sharedstorage_download_batch
                              - sharedstorage_download_blob
                              - dataexchange_send_batch
                              - dataexchange_send_blob
                              - token_create_pool
                              - token_activate_pool
                              - token_transfer
                              - token_approval
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/transactions/{txnid}/status:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets the status of a transaction
      operationId: getTxnStatusNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      details:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: A set of records describing the activities
                            within the transaction known by the local FireFly node
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of records describing the activities
                                within the transaction known by the local FireFly
                                node
                              properties:
                                error:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If an error occurred related to the
                                      detail entry, it is included here
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the entry referenced
                                      by this detail. The type of this record can
                                      be inferred from the entry type
                                info:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Output details for this entry
                                status:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The status of the detail record.
                                      Cases where an event is required for completion,
                                      but has not arrived yet are marked with a 'pending'
                                      record
                                subtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A sub-type, such as an operation
                                      type, or an event type
                                timestamp:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: date-time
                                    description: The time relevant to when the record
                                      was updated, such as the time an event was created,
                                      or the last update time of an operation
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the transaction status
                                      detail record
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The overall computed status of the transaction,
                            after analyzing the details during the API call
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/verifiers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a list of verifiers
      operationId: getVerifiersNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: identity
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time this verifier was created on this
                                node
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Hash used as a globally consistent identifier
                                for this namespace + type + value combination on every
                                node in the network
                          identity:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity that has
                                claimed this verifier
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the verifier
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the verifier
                              enum:
                              - ethereum_address
                              - fabric_msp_id
                              - dx_peer_id
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The verifier string, such as an Ethereum
                                address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /namespaces/{ns}/verifiers/{hash}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Non-Default Namespace
      description: Gets a verifier by its hash
      operationId: getVerifierByIDNamespace
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: path
          description: The hash of the verifier
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: hash
      - ref: ""
        value:
          extensionprops: {}
          name: ns
          in: path
          description: The namespace which scopes this request
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: default
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time this verifier was created on this
                            node
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: Hash used as a globally consistent identifier
                            for this namespace + type + value combination on every
                            node in the network
                      identity:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity that has claimed
                            this verifier
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the verifier
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the verifier
                          enum:
                          - ethereum_address
                          - fabric_msp_id
                          - dx_peer_id
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The verifier string, such as an Ethereum address,
                            or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/action:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Notify all nodes in the network of a new governance action
      operationId: postNetworkAction
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The action to be performed
                        enum:
                        - terminate
      responses:
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The action to be performed
                          enum:
                          - terminate
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/diddocs/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a DID document by its DID
      operationId: getNetworkDIDDocByDID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      '@context':
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#json-ld
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#json-ld
                      authentication:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                      verificationMethod:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: See https://www.w3.org/TR/did-core/#did-document-properties
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: See https://www.w3.org/TR/did-core/#did-document-properties
                              properties:
                                blockchainAcountId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For blockchains like Ethereum that
                                      represent signing identities directly by their
                                      public key summarized in an account string
                                controller:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                dataExchangePeerID:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A string provided by your Data Exchange
                                      plugin, that it uses a technology specific mechanism
                                      to validate against when messages arrive from
                                      this identity
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
                                mspIdentityString:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: For Hyperledger Fabric where the
                                      signing identity is represented by an MSP identifier
                                      (containing X509 certificate DN strings) that
                                      were validated by your local MSP
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: See https://www.w3.org/TR/did-core/#service-properties
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/identities:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the list of identities in the network (deprecated - use /identities
        instead of /network/identities
      operationId: getNetworkIdentities
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
                          verifiers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: The verifiers, such as blockchain signing
                                    keys, that have been bound to this identity and
                                    can be used to prove data orignates from that
                                    identity
                                  properties:
                                    type:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The type of the verifier
                                        enum:
                                        - ethereum_address
                                        - fabric_msp_id
                                        - dx_peer_id
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The verifier string, such as
                                          an Ethereum address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
      deprecated: true
  /network/identities/{did}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets an identity by its DID (deprecated - use /identities/{did}
        instead of /network/identities/{did})
      operationId: getNetworkIdentityByDID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: path
          description: The identity DID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: fetchverifiers
          in: query
          description: When set, the API will return the verifier for this identity
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
                      verifiers:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The verifiers, such as blockchain signing keys,
                            that have been bound to this identity and can be used
                            to prove data orignates from that identity
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The verifiers, such as blockchain signing
                                keys, that have been bound to this identity and can
                                be used to prove data orignates from that identity
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the verifier
                                    enum:
                                    - ethereum_address
                                    - fabric_msp_id
                                    - dx_peer_id
                                value:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The verifier string, such as an Ethereum
                                      address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
      deprecated: true
  /network/nodes:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of nodes in the network
      operationId: getNetworkNodes
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/nodes/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets information about a specific node in the network
      operationId: getNetworkNode
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The name or ID of the node
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/nodes/self:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Instructs this FireFly node to register itself on the network
      operationId: postNodesSelf
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/organizations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of orgs in the network
      operationId: getNetworkOrgs
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: description
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: did
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.claim
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.update
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messages.verification
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: parent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: profile
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the identity
                          description:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A description of the identity. Part of
                                the updatable profile information of an identity
                          did:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The DID of the identity. Unique across
                                namespaces within a FireFly network
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the identity
                          messages:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: References to the broadcast messages that
                                established this identity and proved ownership of
                                the associated verifiers (keys)
                              properties:
                                claim:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message
                                update:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the most recently applied
                                      update message. Unset if no updates have been
                                      confirmed
                                verification:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of claim message. Unset
                                      for root organization identities
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the identity. The name must
                                be unique within the type and namespace
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the identity. Organization
                                and node identities are always defined in the ff_system
                                namespace
                          parent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity. Unset
                                for root organization identities
                          profile:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of metadata for the identity. Part
                                of the updatable profile information of an identity
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the identity
                              enum:
                              - org
                              - node
                              - custom
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Registers a new org in the network
      operationId: postNewOrganization
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    description:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: A description of the identity. Part of the updatable
                          profile information of an identity
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key to use to make the
                          claim to the identity. Must be available to the local node
                          to sign the identity claim. Will become a verifier on the
                          established identity
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the identity. The name must be unique
                          within the type and namespace
                    parent:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: On input the parent can be specified directly
                          as the UUID of and existing identity, or as a DID to resolve
                          to that identity, or an organization name. The parent must
                          already have been registered, and its blockchain signing
                          key must be available to the local node to sign the verification
                    profile:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: A set of metadata for the identity. Part of the
                          updatable profile information of an identity
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of the identity
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/organizations/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets information about a specifc org in the network
      operationId: getNetworkOrg
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The name or ID of the org
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /network/organizations/self:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Instructs this FireFly node to register its org on the network
      operationId: postNewOrganizationSelf
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "true"
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the identity
                      description:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A description of the identity. Part of the
                            updatable profile information of an identity
                      did:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The DID of the identity. Unique across namespaces
                            within a FireFly network
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the identity
                      messages:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: References to the broadcast messages that established
                            this identity and proved ownership of the associated verifiers
                            (keys)
                          properties:
                            claim:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message
                            update:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the most recently applied
                                  update message. Unset if no updates have been confirmed
                            verification:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of claim message. Unset for
                                  root organization identities
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the identity. The name must be
                            unique within the type and namespace
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the identity. Organization
                            and node identities are always defined in the ff_system
                            namespace
                      parent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity. Unset for
                            root organization identities
                      profile:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: A set of metadata for the identity. Part of
                            the updatable profile information of an identity
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the identity
                          enum:
                          - org
                          - node
                          - custom
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the identity profile
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /operations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a a list of operations
      operationId: getOps
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: error
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: input
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: output
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: plugin
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: retry
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: status
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the operation was created
                          error:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Any error reported back from the plugin
                                for this operation
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the operation
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The input to this operation
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the operation
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Any output reported back from the plugin
                                for this operation
                          plugin:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The plugin responsible for performing the
                                operation
                          retry:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: If this operation was initiated as a retry
                                to a previous operation, this field points to the
                                UUID of the operation being retried
                          status:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current status of the operation
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction the
                                operation is part of
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the operation
                              enum:
                              - blockchain_pin_batch
                              - blockchain_invoke
                              - sharedstorage_upload_batch
                              - sharedstorage_upload_blob
                              - sharedstorage_download_batch
                              - sharedstorage_download_blob
                              - dataexchange_send_batch
                              - dataexchange_send_blob
                              - token_create_pool
                              - token_activate_pool
                              - token_transfer
                              - token_approval
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /operations/{opid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets an operation by ID
      operationId: getOpByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: opid
          in: path
          description: The operation ID key to get
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /operations/{opid}/retry:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Retries a failed operation
      operationId: postOpRetry
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: opid
          in: path
          description: The UUID of the operation
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
      responses:
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the operation was created
                      error:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: Any error reported back from the plugin for
                            this operation
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the operation
                      input:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: The input to this operation
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the operation
                      output:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Any output reported back from the plugin for
                            this operation
                      plugin:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The plugin responsible for performing the operation
                      retry:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: If this operation was initiated as a retry
                            to a previous operation, this field points to the UUID
                            of the operation being retried
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current status of the operation
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction the operation
                            is part of
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the operation
                          enum:
                          - blockchain_pin_batch
                          - blockchain_invoke
                          - sharedstorage_upload_batch
                          - sharedstorage_upload_blob
                          - sharedstorage_download_batch
                          - sharedstorage_download_blob
                          - dataexchange_send_batch
                          - dataexchange_send_blob
                          - token_create_pool
                          - token_activate_pool
                          - token_transfer
                          - token_approval
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /status:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the status of this node
      operationId: getStatus
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace that this status applies to
                      node:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Details of the local node
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the node, if registered
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of this node, as specified in
                                  the local configuration
                            registered:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether the node has been successfully
                                  registered
                      org:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Details of the organization identity that operates
                            this node
                          properties:
                            did:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The DID of the organization identity,
                                  if registered
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the organization, if registered
                            name:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The name of the node operator organization,
                                  as specified in the local configuration
                            registered:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether the organization has been successfully
                                  registered
                            verifiers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: Array of verifiers (blockchain keys)
                                  owned by this identity
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Array of verifiers (blockchain keys)
                                      owned by this identity
                                    properties:
                                      type:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the verifier
                                          enum:
                                          - ethereum_address
                                          - fabric_msp_id
                                          - dx_peer_id
                                      value:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The verifier string, such as
                                            an Ethereum address, or Fabric MSP identifier
                      plugins:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Information about plugins configured on this
                            node
                          properties:
                            blockchain:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The blockchain plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The blockchain plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            dataExchange:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The data exchange plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The data exchange plugins on this
                                      node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            database:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The database plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The database plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The event plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The event plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            identity:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The identity plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The identity plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            sharedStorage:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The shared storage plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The shared storage plugins on this
                                      node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
                            tokens:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: array
                                description: The token plugins on this node
                                items:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The token plugins on this node
                                    properties:
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The name of the plugin
                                      pluginType:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The type of the plugin
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /status/batchmanager:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Global
      description: Gets the status of the batch manager
      operationId: getStatusBatchManager
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      processors:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: An array of currently active batch processors
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: An array of currently active batch processors
                              properties:
                                dispatcher:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of dispatcher for this processor
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The name of the processor, which
                                      includes details of the attributes of message
                                      are allocated to this processor
                                status:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: The flush status for this batch processor
                                    properties:
                                      averageBatchBytes:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          format: int64
                                          description: The average byte size of each
                                            batch
                                      averageBatchData:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: number
                                          format: double
                                          description: The average number of data
                                            attachments included in each batch
                                      averageBatchMessages:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: number
                                          format: double
                                          description: The average number of messages
                                            included in each batch
                                      averageFlushTimeMS:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          format: int64
                                          description: The average amount of time
                                            spent flushing each batch
                                      blocked:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: boolean
                                          description: True if the batch flush is
                                            in a retry loop, due to errors being returned
                                            by the plugins
                                      flushing:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          format: uuid
                                          description: If a flush is in progress,
                                            this is the UUID of the batch being flushed
                                      lastFlushError:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: The last error received by
                                            this batch processor while flushing
                                      lastFlushErrorTime:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          format: date-time
                                          description: The time of the last flush
                                      lastFlushStartTime:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          format: date-time
                                          description: The last time a flush was performed
                                      totalBatches:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          format: int64
                                          description: The total count of batches
                                            flushed by this processor since it started
                                      totalErrors:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: integer
                                          format: int64
                                          description: The total count of error flushed
                                            encountered by this processor since it
                                            started
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /status/pins:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Global
      description: Queries the pins table that is the status of the event aggregator
      operationId: getStatusPins
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: batch
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: dispatched
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: index
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: masked
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sequence
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          batch:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the batch of messages this
                                pin is part of
                          batchHash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The manifest hash batch of messages this
                                pin is part of
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the FireFly node created the pin
                          dispatched:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Once true, this pin has been processed
                                and will not be processed again
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash represents a topic within a message
                                in the batch. If a message has multiple topics, then
                                multiple pins are created. If the message is private,
                                the hash is masked for privacy
                          index:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: The index of this pin within the batch.
                                One pin is created for each topic, of each message
                                in the batch
                          masked:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: True if the pin is for a private message,
                                and hence is masked with the group ID and salted with
                                a nonce so observers of the blockchain cannot use
                                pin hash to match this transaction to other transactions
                                or participants
                          sequence:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              format: int64
                              description: The order of the pin in the local FireFly
                                database, which matches the order in which pins were
                                delivered to FireFly by the blockchain connector event
                                stream
                          signer:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing key that submitted
                                this transaction, as passed through to FireFly by
                                the smart contract that emitted the blockchain event
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /status/websockets:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Global
      description: Gets the status of the current WebSocket connections to this node
      operationId: getStatusWebSockets
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connections:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: List of currently active websocket client connections
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: List of currently active websocket client
                                connections
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The unique ID assigned to this client
                                      connection
                                remoteAddress:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The remote address of the connected
                                      client (if available)
                                subscriptions:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: List of subscriptions currently started
                                      by this client
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: List of subscriptions currently
                                          started by this client
                                        properties:
                                          ephemeral:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: boolean
                                              description: Indicates whether the subscription
                                                is ephemeral (vs durable)
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The subscription name (for
                                                durable subscriptions only)
                                          namespace:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The subscription namespace
                                userAgent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The user agent of the connected client
                                      (if available)
                      enabled:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Indicates whether the websockets plugin is
                            enabled
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /subscriptions:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of subscriptions
      operationId: getSubscriptions
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: events
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: filters
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: options
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: transport
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Creation time of the subscription
                          ephemeral:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Ephemeral subscriptions only exist as long
                                as the application is connected, and as such will
                                miss events that occur while the application is disconnected,
                                and cannot be created administratively. You can create
                                one over over a connected WebSocket connection
                          filter:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Server-side filter to apply to events
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.author''
                                      instead'
                                blockchainevent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to blockchain events.
                                      If an event is not a blockchain event, these
                                      filters are ignored
                                    properties:
                                      listener:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the blockchain event 'listener' field,
                                            which is the UUID of the event listener.
                                            So you can restrict your subscription
                                            to certain blockchain listeners. Alternatively
                                            to avoid your application need to know
                                            listener UUIDs you can set the 'topic'
                                            field of blockchain event listeners, and
                                            use a topic filter on your subscriptions
                                      name:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the blockchain event 'name' field,
                                            which is the name of the event in the
                                            underlying blockchain smart contract
                                events:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      event type, to subscribe to a subset of event
                                      types
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.group''
                                      instead'
                                message:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to message events.
                                      If an event is not a message event, these filters
                                      are ignored
                                    properties:
                                      author:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.author' field
                                      group:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.group' field
                                      tag:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the message 'header.tag' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''message.tag''
                                      instead'
                                topic:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      topic of the event, to subscribe to a subset
                                      of topics. Note for messages sent with multiple
                                      topics, a separate event is emitted for each
                                      topic
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Deprecated: Please use ''topic''
                                      instead'
                                transaction:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Filters specific to events with a
                                      transaction. If an event is not associated with
                                      a transaction, this filter is ignored
                                    properties:
                                      type:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: Regular expression to apply
                                            to the transaction 'type' field
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the subscription
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the subscription. The application
                                specifies this name when it connects, in order to
                                attach to the subscription and receive events that
                                arrived while it was disconnected. If multiple apps
                                connect to the same subscription, events are workload
                                balanced across the connected application instances
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the subscription. A subscription
                                will only receive events generated in the namespace
                                of the subscription
                          options:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Subscription options
                              properties:
                                fastack:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: When true the event
                                      will be acknowledged before the webhook is invoked,
                                      allowing parallel invocations'
                                firstEvent:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Whether your appplication would like
                                      to receive events from the 'oldest' event emitted
                                      by your FireFly node (from the beginning of
                                      time), or the 'newest' event (from now), or
                                      a specific event sequence. Default is 'newest'
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: Static headers to
                                      set on the webhook request'
                                input:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: A set of options
                                      to extract data from the first JSON input data
                                      in the incoming message. Only applies if withData=true'
                                    properties:
                                      body:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for the request
                                            body. Default is the whole first body
                                      headers:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for headers
                                      path:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for a path to
                                            append with escaping to the webhook path
                                      query:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use for query parameters
                                      replytx:
                                        ref: ""
                                        value:
                                          extensionprops: {}
                                          type: string
                                          description: A top-level property of the
                                            first data input, to use to dynamically
                                            set whether to pin the response (so the
                                            requester can choose)
                                json:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: Whether to assume
                                      the response body is JSON, regardless of the
                                      returned Content-Type'
                                method:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: HTTP method to invoke.
                                      Default=POST'
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: 'Webhooks only: Static query params
                                      to set on the webhook request'
                                readAhead:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: integer
                                    description: The number of events to stream ahead
                                      to your application, while waiting for confirmation
                                      of consumption of those events. At least once
                                      delivery semantics are used in FireFly, so if
                                      your application crashes/reconnects this is
                                      the maximum number of events you would expect
                                      to be redelivered after it restarts
                                    minimum: 0
                                    maximum: 65535
                                reply:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: 'Webhooks only: Whether to automatically
                                      send a reply event, using the body returned
                                      by the webhook'
                                replytag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: The tag to set on
                                      the reply message'
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: The transaction type
                                      to set on the reply message'
                                url:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: 'Webhooks only: HTTP url to invoke.
                                      Can be relative if a base URL is set in the
                                      webhook plugin config'
                                withData:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: boolean
                                    description: Whether message events delivered
                                      over the subscription, should be packaged with
                                      the full data of those messages in-line as part
                                      of the event JSON payload. Or if the application
                                      should make separate REST calls to download
                                      that data. May not be supported on some transports.
                          transport:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The transport plugin responsible for event
                                delivery (WebSockets, Webhooks, JMS, NATS etc.)
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a new subscription for an application to receive events
        from FireFly
      operationId: postNewSubscription
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    filter:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Server-side filter to apply to events
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.author''
                                instead'
                          blockchainevent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to blockchain events.
                                If an event is not a blockchain event, these filters
                                are ignored
                              properties:
                                listener:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'listener' field, which is
                                      the UUID of the event listener. So you can restrict
                                      your subscription to certain blockchain listeners.
                                      Alternatively to avoid your application need
                                      to know listener UUIDs you can set the 'topic'
                                      field of blockchain event listeners, and use
                                      a topic filter on your subscriptions
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'name' field, which is the
                                      name of the event in the underlying blockchain
                                      smart contract
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the event
                                type, to subscribe to a subset of event types
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.group''
                                instead'
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to message events. If
                                an event is not a message event, these filters are
                                ignored
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.author' field
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.group' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.tag' field
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.tag''
                                instead'
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the topic
                                of the event, to subscribe to a subset of topics.
                                Note for messages sent with multiple topics, a separate
                                event is emitted for each topic
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''topic'' instead'
                          transaction:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to events with a transaction.
                                If an event is not associated with a transaction,
                                this filter is ignored
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      transaction 'type' field
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the subscription. The application
                          specifies this name when it connects, in order to attach
                          to the subscription and receive events that arrived while
                          it was disconnected. If multiple apps connect to the same
                          subscription, events are workload balanced across the connected
                          application instances
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace of the subscription. A subscription
                          will only receive events generated in the namespace of the
                          subscription
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Subscription options
                        properties:
                          fastack:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: When true the event will
                                be acknowledged before the webhook is invoked, allowing
                                parallel invocations'
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Whether your appplication would like to
                                receive events from the 'oldest' event emitted by
                                your FireFly node (from the beginning of time), or
                                the 'newest' event (from now), or a specific event
                                sequence. Default is 'newest'
                          headers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static headers to set on
                                the webhook request'
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: A set of options to extract
                                data from the first JSON input data in the incoming
                                message. Only applies if withData=true'
                              properties:
                                body:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for the request body. Default
                                      is the whole first body
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for headers
                                path:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for a path to append with
                                      escaping to the webhook path
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for query parameters
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use to dynamically set whether
                                      to pin the response (so the requester can choose)
                          json:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to assume the response
                                body is JSON, regardless of the returned Content-Type'
                          method:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP method to invoke.
                                Default=POST'
                          query:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static query params to
                                set on the webhook request'
                          readAhead:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: The number of events to stream ahead to
                                your application, while waiting for confirmation of
                                consumption of those events. At least once delivery
                                semantics are used in FireFly, so if your application
                                crashes/reconnects this is the maximum number of events
                                you would expect to be redelivered after it restarts
                              minimum: 0
                              maximum: 65535
                          reply:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to automatically
                                send a reply event, using the body returned by the
                                webhook'
                          replytag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The tag to set on the reply
                                message'
                          replytx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The transaction type to
                                set on the reply message'
                          url:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP url to invoke. Can
                                be relative if a base URL is set in the webhook plugin
                                config'
                          withData:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether message events delivered over the
                                subscription, should be packaged with the full data
                                of those messages in-line as part of the event JSON
                                payload. Or if the application should make separate
                                REST calls to download that data. May not be supported
                                on some transports.
                    transport:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The transport plugin responsible for event delivery
                          (WebSockets, Webhooks, JMS, NATS etc.)
      responses:
        "201":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    put:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Update an existing subscription
      operationId: putSubscription
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    filter:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Server-side filter to apply to events
                        properties:
                          author:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.author''
                                instead'
                          blockchainevent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to blockchain events.
                                If an event is not a blockchain event, these filters
                                are ignored
                              properties:
                                listener:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'listener' field, which is
                                      the UUID of the event listener. So you can restrict
                                      your subscription to certain blockchain listeners.
                                      Alternatively to avoid your application need
                                      to know listener UUIDs you can set the 'topic'
                                      field of blockchain event listeners, and use
                                      a topic filter on your subscriptions
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      blockchain event 'name' field, which is the
                                      name of the event in the underlying blockchain
                                      smart contract
                          events:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the event
                                type, to subscribe to a subset of event types
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.group''
                                instead'
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to message events. If
                                an event is not a message event, these filters are
                                ignored
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.author' field
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.group' field
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      message 'header.tag' field
                          tag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''message.tag''
                                instead'
                          topic:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Regular expression to apply to the topic
                                of the event, to subscribe to a subset of topics.
                                Note for messages sent with multiple topics, a separate
                                event is emitted for each topic
                          topics:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Deprecated: Please use ''topic'' instead'
                          transaction:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Filters specific to events with a transaction.
                                If an event is not associated with a transaction,
                                this filter is ignored
                              properties:
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Regular expression to apply to the
                                      transaction 'type' field
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the subscription. The application
                          specifies this name when it connects, in order to attach
                          to the subscription and receive events that arrived while
                          it was disconnected. If multiple apps connect to the same
                          subscription, events are workload balanced across the connected
                          application instances
                    namespace:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The namespace of the subscription. A subscription
                          will only receive events generated in the namespace of the
                          subscription
                    options:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Subscription options
                        properties:
                          fastack:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: When true the event will
                                be acknowledged before the webhook is invoked, allowing
                                parallel invocations'
                          firstEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Whether your appplication would like to
                                receive events from the 'oldest' event emitted by
                                your FireFly node (from the beginning of time), or
                                the 'newest' event (from now), or a specific event
                                sequence. Default is 'newest'
                          headers:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static headers to set on
                                the webhook request'
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: A set of options to extract
                                data from the first JSON input data in the incoming
                                message. Only applies if withData=true'
                              properties:
                                body:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for the request body. Default
                                      is the whole first body
                                headers:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for headers
                                path:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for a path to append with
                                      escaping to the webhook path
                                query:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use for query parameters
                                replytx:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A top-level property of the first
                                      data input, to use to dynamically set whether
                                      to pin the response (so the requester can choose)
                          json:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to assume the response
                                body is JSON, regardless of the returned Content-Type'
                          method:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP method to invoke.
                                Default=POST'
                          query:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: 'Webhooks only: Static query params to
                                set on the webhook request'
                          readAhead:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: The number of events to stream ahead to
                                your application, while waiting for confirmation of
                                consumption of those events. At least once delivery
                                semantics are used in FireFly, so if your application
                                crashes/reconnects this is the maximum number of events
                                you would expect to be redelivered after it restarts
                              minimum: 0
                              maximum: 65535
                          reply:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: 'Webhooks only: Whether to automatically
                                send a reply event, using the body returned by the
                                webhook'
                          replytag:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The tag to set on the reply
                                message'
                          replytx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: The transaction type to
                                set on the reply message'
                          url:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: 'Webhooks only: HTTP url to invoke. Can
                                be relative if a base URL is set in the webhook plugin
                                config'
                          withData:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether message events delivered over the
                                subscription, should be packaged with the full data
                                of those messages in-line as part of the event JSON
                                payload. Or if the application should make separate
                                REST calls to download that data. May not be supported
                                on some transports.
                    transport:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The transport plugin responsible for event delivery
                          (WebSockets, Webhooks, JMS, NATS etc.)
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /subscriptions/{subid}:
    extensionprops: {}
    delete:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Deletes a subscription
      operationId: deleteSubscription
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: subid
          in: path
          description: The subscription ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "204":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a subscription by its ID
      operationId: getSubscriptionByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: subid
          in: path
          description: The subscription ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Creation time of the subscription
                      ephemeral:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Ephemeral subscriptions only exist as long
                            as the application is connected, and as such will miss
                            events that occur while the application is disconnected,
                            and cannot be created administratively. You can create
                            one over over a connected WebSocket connection
                      filter:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Server-side filter to apply to events
                          properties:
                            author:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.author''
                                  instead'
                            blockchainevent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to blockchain events.
                                  If an event is not a blockchain event, these filters
                                  are ignored
                                properties:
                                  listener:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'listener' field, which
                                        is the UUID of the event listener. So you
                                        can restrict your subscription to certain
                                        blockchain listeners. Alternatively to avoid
                                        your application need to know listener UUIDs
                                        you can set the 'topic' field of blockchain
                                        event listeners, and use a topic filter on
                                        your subscriptions
                                  name:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the blockchain event 'name' field, which is
                                        the name of the event in the underlying blockchain
                                        smart contract
                            events:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the event
                                  type, to subscribe to a subset of event types
                            group:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.group''
                                  instead'
                            message:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to message events. If
                                  an event is not a message event, these filters are
                                  ignored
                                properties:
                                  author:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.author' field
                                  group:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.group' field
                                  tag:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the message 'header.tag' field
                            tag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''message.tag''
                                  instead'
                            topic:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Regular expression to apply to the topic
                                  of the event, to subscribe to a subset of topics.
                                  Note for messages sent with multiple topics, a separate
                                  event is emitted for each topic
                            topics:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Deprecated: Please use ''topic'' instead'
                            transaction:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: Filters specific to events with a transaction.
                                  If an event is not associated with a transaction,
                                  this filter is ignored
                                properties:
                                  type:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: Regular expression to apply to
                                        the transaction 'type' field
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the subscription
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the subscription. The application
                            specifies this name when it connects, in order to attach
                            to the subscription and receive events that arrived while
                            it was disconnected. If multiple apps connect to the same
                            subscription, events are workload balanced across the
                            connected application instances
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the subscription. A subscription
                            will only receive events generated in the namespace of
                            the subscription
                      options:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Subscription options
                          properties:
                            fastack:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: When true the event will
                                  be acknowledged before the webhook is invoked, allowing
                                  parallel invocations'
                            firstEvent:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: Whether your appplication would like
                                  to receive events from the 'oldest' event emitted
                                  by your FireFly node (from the beginning of time),
                                  or the 'newest' event (from now), or a specific
                                  event sequence. Default is 'newest'
                            headers:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static headers to set
                                  on the webhook request'
                            input:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: A set of options to extract
                                  data from the first JSON input data in the incoming
                                  message. Only applies if withData=true'
                                properties:
                                  body:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for the request body. Default
                                        is the whole first body
                                  headers:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for headers
                                  path:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for a path to append with
                                        escaping to the webhook path
                                  query:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use for query parameters
                                  replytx:
                                    ref: ""
                                    value:
                                      extensionprops: {}
                                      type: string
                                      description: A top-level property of the first
                                        data input, to use to dynamically set whether
                                        to pin the response (so the requester can
                                        choose)
                            json:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to assume the
                                  response body is JSON, regardless of the returned
                                  Content-Type'
                            method:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP method to invoke.
                                  Default=POST'
                            query:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: object
                                description: 'Webhooks only: Static query params to
                                  set on the webhook request'
                            readAhead:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: integer
                                description: The number of events to stream ahead
                                  to your application, while waiting for confirmation
                                  of consumption of those events. At least once delivery
                                  semantics are used in FireFly, so if your application
                                  crashes/reconnects this is the maximum number of
                                  events you would expect to be redelivered after
                                  it restarts
                                minimum: 0
                                maximum: 65535
                            reply:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: 'Webhooks only: Whether to automatically
                                  send a reply event, using the body returned by the
                                  webhook'
                            replytag:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The tag to set on the
                                  reply message'
                            replytx:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: The transaction type
                                  to set on the reply message'
                            url:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: 'Webhooks only: HTTP url to invoke. Can
                                  be relative if a base URL is set in the webhook
                                  plugin config'
                            withData:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: boolean
                                description: Whether message events delivered over
                                  the subscription, should be packaged with the full
                                  data of those messages in-line as part of the event
                                  JSON payload. Or if the application should make
                                  separate REST calls to download that data. May not
                                  be supported on some transports.
                      transport:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The transport plugin responsible for event
                            delivery (WebSockets, Webhooks, JMS, NATS etc.)
                      updated:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: Last time the subscription was updated
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/accounts:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token accounts
      operationId: getTokenAccounts
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing identity this balance
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/accounts/{key}/pools:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token pools that contain a given token account key
      operationId: getTokenAccountPools
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: path
          description: The key for the token account. The exact format may vary based
            on the token connector use.
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this balance entry
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/approvals:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token approvals
      operationId: getTokenApprovals
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: active
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: approved
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainevent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: localid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: operator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: subject
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          active:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Indicates if this approval is currently
                                active (only one approval can be active per subject)
                          approved:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: boolean
                              description: Whether this record grants permission for
                                an operator to perform actions on the token balance
                                (true), or revokes permission (false)
                          blockchainEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the blockchain event
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file. Required on
                                input when there are more than one token connectors
                                configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the token approval
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Token connector specific information about
                                the approval operation, such as whether it applied
                                to a limited balance of a fungible token. See your
                                chosen token connector documentation for details
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing key for the approval
                                request. On input defaults to the first signing key
                                of the organization that operates the node
                          localId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of this token approval, in the
                                local FireFly node
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the approval, which must
                                match the namespace of the token pool
                          operator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain identity that is granted
                                the approval
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this approval applies
                                to
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely with respect to the
                                blockchain
                          subject:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A string identifying the parties and entities
                                in the scope of this approval, as provided by the
                                token connector
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If submitted via FireFly, this will reference
                                the UUID of the FireFly transaction (if the token
                                connector in use supports attaching data)
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a token approval
      operationId: postTokenApproval
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    approved:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: boolean
                        description: Whether this record grants permission for an
                          operator to perform actions on the token balance (true),
                          or revokes permission (false)
                    config:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Input only field, with token connector specific
                          configuration of the approval.  See your chosen token connector
                          documentation for details
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the approval request.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    operator:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain identity that is granted the approval
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        format: uuid
                        description: The UUID the token pool this approval applies
                          to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      active:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Indicates if this approval is currently active
                            (only one approval can be active per subject)
                      approved:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Whether this record grants permission for an
                            operator to perform actions on the token balance (true),
                            or revokes permission (false)
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the token approval
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the approval operation, such as whether it applied to
                            a limited balance of a fungible token. See your chosen
                            token connector documentation for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the approval
                            request. On input defaults to the first signing key of
                            the organization that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token approval, in the local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the approval, which must
                            match the namespace of the token pool
                      operator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain identity that is granted the
                            approval
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this approval applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      subject:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A string identifying the parties and entities
                            in the scope of this approval, as provided by the token
                            connector
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      active:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Indicates if this approval is currently active
                            (only one approval can be active per subject)
                      approved:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: boolean
                          description: Whether this record grants permission for an
                            operator to perform actions on the token balance (true),
                            or revokes permission (false)
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the token approval
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the approval operation, such as whether it applied to
                            a limited balance of a fungible token. See your chosen
                            token connector documentation for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the approval
                            request. On input defaults to the first signing key of
                            the organization that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token approval, in the local
                            FireFly node
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the approval, which must
                            match the namespace of the token pool
                      operator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain identity that is granted the
                            approval
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this approval applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      subject:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A string identifying the parties and entities
                            in the scope of this approval, as provided by the token
                            connector
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/balances:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token balances
      operationId: getTokenBalances
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: balance
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tokenindex
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: updated
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: uri
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          balance:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The numeric balance. For non-fungible tokens
                                will always be 1. For fungible tokens, the number
                                of decimals for the token pool should be considered
                                when interpreting the balance. For example, with 18
                                decimals a fractional balance of 10.234 will be returned
                                as 10,234,000,000,000,000,000
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The token connector that is responsible
                                for the token pool of this balance entry
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing identity this balance
                                applies to
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the token pool for this
                                balance entry
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this balance entry
                                applies to
                          tokenIndex:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The index of the token within the pool
                                that this balance applies to
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last time the balance was updated by
                                applying a transfer event
                          uri:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The URI of the token this balance entry
                                applies to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/burn:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Burns some tokens
      operationId: postTokenBurn
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    from:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The source account for the transfer. On input
                          defaults to the value of 'key'
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/connectors:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the list of token connectors currently in use
      operationId: getTokenConnectors
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as configured
                                in the FireFly core configuration file
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/mint:
    extensionprops: {}
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Mints some tokens
      operationId: postTokenMint
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    to:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The target account for the transfer. On input
                          defaults to the value of 'key'
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/pools:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token pools
      operationId: getTokenPools
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: decimals
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: locator
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: name
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: standard
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: state
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: symbol
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file that is responsible
                                for the token pool. Required on input when multiple
                                token connectors are configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the pool
                          decimals:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: integer
                              description: Number of decimal places that this token
                                has
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the token pool
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Token connector specific information about
                                the pool. See your chosen token connector documentation
                                for details
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The signing key used to create the token
                                pool. On input for token connectors that support on-chain
                                deployment of new tokens (vs. only index existing
                                ones) this determines the signing key used to create
                                the token on-chain
                          locator:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: A unique identifier for the pool, as provided
                                by the token connector
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the broadcast message used
                                to inform the network to index this pool
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token pool. Note the name
                                is not validated against the description of the token
                                on the blockchain
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the token pool
                          standard:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The ERC standard the token pool conforms
                                to, as reported by the token connector
                          state:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current state of the token pool
                              enum:
                              - unknown
                              - pending
                              - confirmed
                          symbol:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The token symbol. If supplied on input
                                for an existing on-chain token, this must match the
                                on-chain information
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Reference to the FireFly transaction used
                                to create and broadcast this pool to the network
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of token the pool contains, such
                                as fungible/non-fungible
                              enum:
                              - fungible
                              - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Creates a new token pool
      operationId: postTokenPool
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    config:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: Input only field, with token connector specific
                          configuration of the pool, such as an existing Ethereum
                          address and block number to used to index the pool. See
                          your chosen token connector documentation for details
                    connector:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the token connector, as specified
                          in the FireFly core configuration file that is responsible
                          for the token pool. Required on input when multiple token
                          connectors are configured
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The signing key used to create the token pool.
                          On input for token connectors that support on-chain deployment
                          of new tokens (vs. only index existing ones) this determines
                          the signing key used to create the token on-chain
                    name:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name of the token pool. Note the name is
                          not validated against the description of the token on the
                          blockchain
                    symbol:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The token symbol. If supplied on input for an
                          existing on-chain token, this must match the on-chain information
                    type:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The type of token the pool contains, such as
                          fungible/non-fungible
                        enum:
                        - fungible
                        - nonfungible
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/pools/{nameOrId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a token pool by its name or its ID
      operationId: getTokenPoolByNameOrID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: nameOrId
          in: path
          description: The token pool name or ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file that is responsible
                            for the token pool. Required on input when multiple token
                            connectors are configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the pool
                      decimals:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: integer
                          description: Number of decimal places that this token has
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the token pool
                      info:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Token connector specific information about
                            the pool. See your chosen token connector documentation
                            for details
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The signing key used to create the token pool.
                            On input for token connectors that support on-chain deployment
                            of new tokens (vs. only index existing ones) this determines
                            the signing key used to create the token on-chain
                      locator:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: A unique identifier for the pool, as provided
                            by the token connector
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the broadcast message used to inform
                            the network to index this pool
                      name:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token pool. Note the name is
                            not validated against the description of the token on
                            the blockchain
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the token pool
                      standard:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The ERC standard the token pool conforms to,
                            as reported by the token connector
                      state:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The current state of the token pool
                          enum:
                          - unknown
                          - pending
                          - confirmed
                      symbol:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The token symbol. If supplied on input for
                            an existing on-chain token, this must match the on-chain
                            information
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: Reference to the FireFly transaction used to
                            create and broadcast this pool to the network
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of token the pool contains, such as
                            fungible/non-fungible
                          enum:
                          - fungible
                          - nonfungible
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/transfers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of token transfers
      operationId: getTokenTransfers
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: fromOrTo
          in: query
          description: The sending or receiving token account for a token transfer
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: amount
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainevent
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: connector
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: from
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: key
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: localid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: message
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: messagehash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: pool
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: protocolid
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: to
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tokenindex
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: tx.type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: uri
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          amount:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The amount for the transfer. For non-fungible
                                tokens will always be 1. For fungible tokens, the
                                number of decimals for the token pool should be considered
                                when inputting the amount. For example, with 18 decimals
                                a fractional balance of 10.234 will be specified as
                                10,234,000,000,000,000,000
                          blockchainEvent:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the blockchain event
                          connector:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the token connector, as specified
                                in the FireFly core configuration file. Required on
                                input when there are more than one token connectors
                                configured
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The creation time of the transfer
                          from:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The source account for the transfer. On
                                input defaults to the value of 'key'
                          key:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain signing key for the transfer.
                                On input defaults to the first signing key of the
                                organization that operates the node
                          localId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of this token transfer, in the
                                local FireFly node
                          message:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of a message that has been correlated
                                with this transfer using the data field of the transfer
                                in a compatible token connector
                          messageHash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: The hash of a message that has been correlated
                                with this transfer using the data field of the transfer
                                in a compatible token connector
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace for the transfer, which must
                                match the namespace of the token pool
                          pool:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID the token pool this transfer applies
                                to
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely with respect to the
                                blockchain
                          to:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The target account for the transfer. On
                                input defaults to the value of 'key'
                          tokenIndex:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The index of the token within the pool
                                that this transfer applies to
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If submitted via FireFly, this will reference
                                the UUID of the FireFly transaction (if the token
                                connector in use supports attaching data)
                              properties:
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of transfer such as mint/burn/transfer
                              enum:
                              - mint
                              - burn
                              - transfer
                          uri:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The URI of the token this transfer applies
                                to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
    post:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Transfers some tokens
      operationId: postTokenTransfer
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: confirm
          in: query
          description: When true the HTTP request blocks until the message is confirmed
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      requestBody:
        ref: ""
        value:
          extensionprops: {}
          content:
            application/json:
              extensionprops: {}
              schema:
                ref: ""
                value:
                  extensionprops: {}
                  type: object
                  properties:
                    amount:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The amount for the transfer. For non-fungible
                          tokens will always be 1. For fungible tokens, the number
                          of decimals for the token pool should be considered when
                          inputting the amount. For example, with 18 decimals a fractional
                          balance of 10.234 will be specified as 10,234,000,000,000,000,000
                    from:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The source account for the transfer. On input
                          defaults to the value of 'key'
                    key:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The blockchain signing key for the transfer.
                          On input defaults to the first signing key of the organization
                          that operates the node
                    message:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        description: You can specify a message to correlate with the
                          transfer, which can be of type broadcast or private. Your
                          chosen token connector and on-chain smart contract must
                          support on-chain/off-chain correlation by taking a `data`
                          input on the transfer
                        properties:
                          data:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: For input allows you to specify data in-line
                                in the message, that will be turned into data attachments.
                                For output when fetchdata is used on API calls, includes
                                the in-line data payloads of all data attachments
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: object
                                  description: For input allows you to specify data
                                    in-line in the message, that will be turned into
                                    data attachments. For output when fetchdata is
                                    used on API calls, includes the in-line data payloads
                                    of all data attachments
                                  properties:
                                    datatype:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: The optional datatype to use
                                          for validation of the in-line data
                                        properties:
                                          name:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The name of the datatype
                                          version:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The version of the datatype.
                                                Semantic versioning is encouraged,
                                                such as v1.0.1
                                    id:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        format: uuid
                                        description: The UUID of the referenced data
                                          resource
                                    validator:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: The data validator type to use
                                          for in-line data
                                    value:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        description: The in-line value for the data.
                                          Can be any JSON type - object, array, string,
                                          number or boolean
                          group:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Allows you to specify details of the private
                                group of recipients in-line in the message. Alternative
                                to using the header.group to specify the hash of a
                                group that has been previously resolved
                              properties:
                                members:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: An array of members of the group.
                                      If no identities local to the sending node are
                                      included, then the organization owner of the
                                      local node is added automatically
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: object
                                        description: An array of members of the group.
                                          If no identities local to the sending node
                                          are included, then the organization owner
                                          of the local node is added automatically
                                        properties:
                                          identity:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The DID of the group member.
                                                On input can be a UUID or org name,
                                                and will be resolved to a DID
                                          node:
                                            ref: ""
                                            value:
                                              extensionprops: {}
                                              type: string
                                              description: The UUID of the node that
                                                will receive a copy of the off-chain
                                                message for the identity. The first
                                                applicable node for the identity will
                                                be picked automatically on input if
                                                not specified
                                name:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: Optional name for the group. Allows
                                      you to have multiple separate groups with the
                                      same list of participants
                          header:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The message header contains all fields
                                that are used to build the message hash
                              properties:
                                author:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The DID of identity of the submitter
                                cid:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The correlation ID of the message.
                                      Set this when a message is a response to another
                                      message
                                group:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: byte
                                    description: Private messages only - the identifier
                                      hash of the privacy group. Derived from the
                                      name and member list of the group
                                key:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The on-chain signing key used to
                                      sign the transaction
                                tag:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The message tag indicates the purpose
                                      of the message to the applications that process
                                      it
                                topics:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: array
                                    description: A message topic associates this message
                                      with an ordered stream of data. A custom topic
                                      should be assigned - using the default topic
                                      is discouraged
                                    items:
                                      ref: ""
                                      value:
                                        extensionprops: {}
                                        type: string
                                        description: A message topic associates this
                                          message with an ordered stream of data.
                                          A custom topic should be assigned - using
                                          the default topic is discouraged
                                txtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of transaction used to order/deliver
                                      this message
                                    enum:
                                    - none
                                    - unpinned
                                    - batch_pin
                                    - token_pool
                                    - token_transfer
                                    - contract_invoke
                                    - token_approval
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the message
                                    enum:
                                    - definition
                                    - broadcast
                                    - private
                                    - groupinit
                                    - transfer_broadcast
                                    - transfer_private
                    pool:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The name or UUID of a token pool
                    to:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The target account for the transfer. On input
                          defaults to the value of 'key'
                    tokenIndex:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: string
                        description: The index of the token within the pool that this
                          transfer applies to
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        "202":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /tokens/transfers/{transferId}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a token transfer by its ID
      operationId: getTokenTransferByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: transferId
          in: path
          description: The token transfer ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      amount:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The amount for the transfer. For non-fungible
                            tokens will always be 1. For fungible tokens, the number
                            of decimals for the token pool should be considered when
                            inputting the amount. For example, with 18 decimals a
                            fractional balance of 10.234 will be specified as 10,234,000,000,000,000,000
                      blockchainEvent:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the blockchain event
                      connector:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The name of the token connector, as specified
                            in the FireFly core configuration file. Required on input
                            when there are more than one token connectors configured
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The creation time of the transfer
                      from:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The source account for the transfer. On input
                            defaults to the value of 'key'
                      key:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The blockchain signing key for the transfer.
                            On input defaults to the first signing key of the organization
                            that operates the node
                      localId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of this token transfer, in the local
                            FireFly node
                      message:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      messageHash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: The hash of a message that has been correlated
                            with this transfer using the data field of the transfer
                            in a compatible token connector
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace for the transfer, which must
                            match the namespace of the token pool
                      pool:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID the token pool this transfer applies
                            to
                      protocolId:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: An alphanumerically sortable string that represents
                            this event uniquely with respect to the blockchain
                      to:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The target account for the transfer. On input
                            defaults to the value of 'key'
                      tokenIndex:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The index of the token within the pool that
                            this transfer applies to
                      tx:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: object
                          description: If submitted via FireFly, this will reference
                            the UUID of the FireFly transaction (if the token connector
                            in use supports attaching data)
                          properties:
                            id:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                format: uuid
                                description: The UUID of the FireFly transaction
                            type:
                              ref: ""
                              value:
                                extensionprops: {}
                                type: string
                                description: The type of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of transfer such as mint/burn/transfer
                          enum:
                          - mint
                          - burn
                          - transfer
                      uri:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The URI of the token this transfer applies
                            to
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /transactions:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of transactions
      operationId: getTxns
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainids
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          blockchainIds:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: array
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                              items:
                                ref: ""
                                value:
                                  extensionprops: {}
                                  type: string
                                  description: The blockchain transaction ID, in the
                                    format specific to the blockchain involved in
                                    the transaction. Not all FireFly transactions
                                    include a blockchain. FireFly transactions are
                                    extensible to support multiple blockchain transactions
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the transaction was created on
                                this node. Note the transaction is individually created
                                with the same UUID on each participant in the FireFly
                                transaction
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the FireFly transaction
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the FireFly transaction
                              enum:
                              - none
                              - unpinned
                              - batch_pin
                              - token_pool
                              - token_transfer
                              - contract_invoke
                              - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /transactions/{txnid}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a transaction by its ID
      operationId: getTxnByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: blockchainids
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: id
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      blockchainIds:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: The blockchain transaction ID, in the format
                            specific to the blockchain involved in the transaction.
                            Not all FireFly transactions include a blockchain. FireFly
                            transactions are extensible to support multiple blockchain
                            transactions
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain transaction ID, in the format
                                specific to the blockchain involved in the transaction.
                                Not all FireFly transactions include a blockchain.
                                FireFly transactions are extensible to support multiple
                                blockchain transactions
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time the transaction was created on this
                            node. Note the transaction is individually created with
                            the same UUID on each participant in the FireFly transaction
                      id:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the FireFly transaction
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the FireFly transaction
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the FireFly transaction
                          enum:
                          - none
                          - unpinned
                          - batch_pin
                          - token_pool
                          - token_transfer
                          - contract_invoke
                          - token_approval
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /transactions/{txnid}/blockchainevents:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list blockchain events for a specific transaction
      operationId: getTxnBlockchainEvents
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID assigned to the event by FireFly
                          info:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Detailed blockchain specific information
                                about the event, as generated by the blockchain connector
                          listener:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the listener that detected
                                this event, or nil for built-in events in the system
                                namespace
                          name:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The name of the event in the blockchain
                                smart contract
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the listener that detected
                                this blockchain event
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The data output by the event, parsed to
                                JSON according to the interface of the smart contract
                          protocolId:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: An alphanumerically sortable string that
                                represents this event uniquely on the blockchain (convention
                                for plugins is zero-padded values BLOCKNUMBER/TXN_INDEX/EVENT_INDEX)
                          source:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The blockchain plugin or token service
                                that detected the event
                          timestamp:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time allocated to this event by the
                                blockchain. This is the block timestamp for most blockchain
                                connectors
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: If this blockchain event is coorelated
                                to FireFly transaction such as a FireFly submitted
                                token transfer, this field is set to the UUID of the
                                FireFly transaction
                              properties:
                                blockchainId:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The blockchain transaction ID, in
                                      the format specific to the blockchain involved
                                      in the transaction. Not all FireFly transactions
                                      include a blockchain
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the FireFly transaction
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the FireFly transaction
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /transactions/{txnid}/operations:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of operations in a specific transaction
      operationId: getTxnOps
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time the operation was created
                          error:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: Any error reported back from the plugin
                                for this operation
                          id:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the operation
                          input:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: The input to this operation
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the operation
                          output:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: Any output reported back from the plugin
                                for this operation
                          plugin:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The plugin responsible for performing the
                                operation
                          retry:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: If this operation was initiated as a retry
                                to a previous operation, this field points to the
                                UUID of the operation being retried
                          status:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The current status of the operation
                          tx:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the FireFly transaction the
                                operation is part of
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the operation
                              enum:
                              - blockchain_pin_batch
                              - blockchain_invoke
                              - sharedstorage_upload_batch
                              - sharedstorage_upload_blob
                              - sharedstorage_download_batch
                              - sharedstorage_download_blob
                              - dataexchange_send_batch
                              - dataexchange_send_blob
                              - token_create_pool
                              - token_activate_pool
                              - token_transfer
                              - token_approval
                          updated:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The last update time of the operation
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /transactions/{txnid}/status:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets the status of a transaction
      operationId: getTxnStatus
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: txnid
          in: path
          description: The transaction ID
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      details:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: array
                          description: A set of records describing the activities
                            within the transaction known by the local FireFly node
                          items:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: object
                              description: A set of records describing the activities
                                within the transaction known by the local FireFly
                                node
                              properties:
                                error:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: If an error occurred related to the
                                      detail entry, it is included here
                                id:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: uuid
                                    description: The UUID of the entry referenced
                                      by this detail. The type of this record can
                                      be inferred from the entry type
                                info:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: object
                                    description: Output details for this entry
                                status:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The status of the detail record.
                                      Cases where an event is required for completion,
                                      but has not arrived yet are marked with a 'pending'
                                      record
                                subtype:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: A sub-type, such as an operation
                                      type, or an event type
                                timestamp:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    format: date-time
                                    description: The time relevant to when the record
                                      was updated, such as the time an event was created,
                                      or the last update time of an operation
                                type:
                                  ref: ""
                                  value:
                                    extensionprops: {}
                                    type: string
                                    description: The type of the transaction status
                                      detail record
                      status:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The overall computed status of the transaction,
                            after analyzing the details during the API call
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /verifiers:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a list of verifiers
      operationId: getVerifiers
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      - ref: ""
        value:
          extensionprops: {}
          name: created
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: identity
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: namespace
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: type
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: value
          in: query
          description: 'Data filter field. Prefixes supported: > >= < <= @ ^ ! !@
            !^'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: sort
          in: query
          description: Sort field. For multi-field sort use comma separated values
            (or multiple query values) with '-' prefix for descending
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: ascending
          in: query
          description: Ascending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: descending
          in: query
          description: Descending sort order (overrides all fields in a multi-field
            sort)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: skip
          in: query
          description: 'The number of records to skip (max: 1,000). Unsuitable for
            bulk operations'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      - ref: ""
        value:
          extensionprops: {}
          name: limit
          in: query
          description: 'The maximum number of records to return (max: 1,000)'
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: "25"
      - ref: ""
        value:
          extensionprops: {}
          name: count
          in: query
          description: Return a total count as well as items (adds extra database
            processing)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: array
                    items:
                      ref: ""
                      value:
                        extensionprops: {}
                        type: object
                        properties:
                          created:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: date-time
                              description: The time this verifier was created on this
                                node
                          hash:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: byte
                              description: Hash used as a globally consistent identifier
                                for this namespace + type + value combination on every
                                node in the network
                          identity:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              format: uuid
                              description: The UUID of the parent identity that has
                                claimed this verifier
                          namespace:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The namespace of the verifier
                          type:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The type of the verifier
                              enum:
                              - ethereum_address
                              - fabric_msp_id
                              - dx_peer_id
                          value:
                            ref: ""
                            value:
                              extensionprops: {}
                              type: string
                              description: The verifier string, such as an Ethereum
                                address, or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
  /verifiers/{hash}:
    extensionprops: {}
    get:
      extensionprops: {}
      tags:
      - Default Namespace
      description: Gets a verifier by its hash
      operationId: getVerifierByID
      parameters:
      - ref: ""
        value:
          extensionprops: {}
          name: hash
          in: path
          description: The hash of the verifier
          required: true
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              example: hash
      - ref: ""
        value:
          extensionprops: {}
          name: Request-Timeout
          in: header
          description: Server-side request timeout (milliseconds, or set a custom
            suffix like 10s)
          schema:
            ref: ""
            value:
              extensionprops: {}
              type: string
              default: 2m0s
      responses:
        "200":
          ref: ""
          value:
            extensionprops: {}
            description: Success
            content:
              application/json:
                extensionprops: {}
                schema:
                  ref: ""
                  value:
                    extensionprops: {}
                    type: object
                    properties:
                      created:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: date-time
                          description: The time this verifier was created on this
                            node
                      hash:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: byte
                          description: Hash used as a globally consistent identifier
                            for this namespace + type + value combination on every
                            node in the network
                      identity:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          format: uuid
                          description: The UUID of the parent identity that has claimed
                            this verifier
                      namespace:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The namespace of the verifier
                      type:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The type of the verifier
                          enum:
                          - ethereum_address
                          - fabric_msp_id
                          - dx_peer_id
                      value:
                        ref: ""
                        value:
                          extensionprops: {}
                          type: string
                          description: The verifier string, such as an Ethereum address,
                            or Fabric MSP identifier
        default:
          ref: ""
          value:
            extensionprops: {}
            description: ""
servers:
- extensionprops: {}
  url: http://localhost:5000
