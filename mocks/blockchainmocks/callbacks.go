// Code generated by mockery v1.0.0. DO NOT EDIT.

package blockchainmocks

import (
	blockchain "github.com/hyperledger/firefly/pkg/blockchain"
	fftypes "github.com/hyperledger/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Callbacks is an autogenerated mock type for the Callbacks type
type Callbacks struct {
	mock.Mock
}

// BatchPinComplete provides a mock function with given fields: batch, signingKey
func (_m *Callbacks) BatchPinComplete(batch *blockchain.BatchPin, signingKey *fftypes.VerifierRef) error {
	ret := _m.Called(batch, signingKey)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blockchain.BatchPin, *fftypes.VerifierRef) error); ok {
		r0 = rf(batch, signingKey)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockchainEvent provides a mock function with given fields: event
func (_m *Callbacks) BlockchainEvent(event *blockchain.EventWithSubscription) error {
	ret := _m.Called(event)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blockchain.EventWithSubscription) error); ok {
		r0 = rf(event)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// BlockchainOpUpdate provides a mock function with given fields: operationID, txState, blockchainTXID, errorMessage, opOutput
func (_m *Callbacks) BlockchainOpUpdate(operationID *fftypes.UUID, txState fftypes.OpStatus, blockchainTXID string, errorMessage string, opOutput fftypes.JSONObject) error {
	ret := _m.Called(operationID, txState, blockchainTXID, errorMessage, opOutput)

	var r0 error
	if rf, ok := ret.Get(0).(func(*fftypes.UUID, fftypes.OpStatus, string, string, fftypes.JSONObject) error); ok {
		r0 = rf(operationID, txState, blockchainTXID, errorMessage, opOutput)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
