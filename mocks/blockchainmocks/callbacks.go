// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package blockchainmocks

import (
	blockchain "github.com/kaleido-io/firefly/pkg/blockchain"
	fftypes "github.com/kaleido-io/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Callbacks is an autogenerated mock type for the Callbacks type
type Callbacks struct {
	mock.Mock
}

// SequencedBroadcastBatch provides a mock function with given fields: batch, author, protocolTxID, additionalInfo
func (_m *Callbacks) SequencedBroadcastBatch(batch *blockchain.BroadcastBatch, author string, protocolTxID string, additionalInfo fftypes.JSONObject) error {
	ret := _m.Called(batch, author, protocolTxID, additionalInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(*blockchain.BroadcastBatch, string, string, fftypes.JSONObject) error); ok {
		r0 = rf(batch, author, protocolTxID, additionalInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransactionUpdate provides a mock function with given fields: txTrackingID, txState, protocolTxID, errorMessage, additionalInfo
func (_m *Callbacks) TransactionUpdate(txTrackingID string, txState fftypes.OpStatus, protocolTxID string, errorMessage string, additionalInfo fftypes.JSONObject) error {
	ret := _m.Called(txTrackingID, txState, protocolTxID, errorMessage, additionalInfo)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, fftypes.OpStatus, string, string, fftypes.JSONObject) error); ok {
		r0 = rf(txTrackingID, txState, protocolTxID, errorMessage, additionalInfo)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
