// Code generated by mockery v1.0.0. DO NOT EDIT.

package namespacemocks

import (
	context "context"

	core "github.com/hyperledger/firefly/pkg/core"
	mock "github.com/stretchr/testify/mock"

	orchestrator "github.com/hyperledger/firefly/internal/orchestrator"

	spievents "github.com/hyperledger/firefly/internal/spievents"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetNamespaces provides a mock function with given fields: ctx
func (_m *Manager) GetNamespaces(ctx context.Context) ([]*core.Namespace, error) {
	ret := _m.Called(ctx)

	var r0 []*core.Namespace
	if rf, ok := ret.Get(0).(func(context.Context) []*core.Namespace); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*core.Namespace)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, cancelCtx
func (_m *Manager) Init(ctx context.Context, cancelCtx context.CancelFunc) error {
	ret := _m.Called(ctx, cancelCtx)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, context.CancelFunc) error); ok {
		r0 = rf(ctx, cancelCtx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Orchestrator provides a mock function with given fields: ns
func (_m *Manager) Orchestrator(ns string) orchestrator.Orchestrator {
	ret := _m.Called(ns)

	var r0 orchestrator.Orchestrator
	if rf, ok := ret.Get(0).(func(string) orchestrator.Orchestrator); ok {
		r0 = rf(ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(orchestrator.Orchestrator)
		}
	}

	return r0
}

// SPIEvents provides a mock function with given fields:
func (_m *Manager) SPIEvents() spievents.Manager {
	ret := _m.Called()

	var r0 spievents.Manager
	if rf, ok := ret.Get(0).(func() spievents.Manager); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(spievents.Manager)
		}
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitStop provides a mock function with given fields:
func (_m *Manager) WaitStop() {
	_m.Called()
}
