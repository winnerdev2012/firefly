// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package batchmocks

import (
	batch "github.com/kaleido-io/firefly/internal/batch"
	fftypes "github.com/kaleido-io/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// Close provides a mock function with given fields:
func (_m *Manager) Close() {
	_m.Called()
}

// NewMessages provides a mock function with given fields:
func (_m *Manager) NewMessages() chan<- int64 {
	ret := _m.Called()

	var r0 chan<- int64
	if rf, ok := ret.Get(0).(func() chan<- int64); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(chan<- int64)
		}
	}

	return r0
}

// RegisterDispatcher provides a mock function with given fields: batchType, handler, batchOptions
func (_m *Manager) RegisterDispatcher(batchType fftypes.MessageType, handler batch.DispatchHandler, batchOptions batch.Options) {
	_m.Called(batchType, handler, batchOptions)
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitStop provides a mock function with given fields:
func (_m *Manager) WaitStop() {
	_m.Called()
}
