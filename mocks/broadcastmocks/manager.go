// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package broadcastmocks

import (
	context "context"

	fftypes "github.com/kaleido-io/firefly/pkg/fftypes"
	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// BroadcastDatatype provides a mock function with given fields: ctx, ns, datatype
func (_m *Manager) BroadcastDatatype(ctx context.Context, ns string, datatype *fftypes.Datatype) (*fftypes.Message, error) {
	ret := _m.Called(ctx, ns, datatype)

	var r0 *fftypes.Message
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.Datatype) *fftypes.Message); ok {
		r0 = rf(ctx, ns, datatype)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *fftypes.Datatype) error); ok {
		r1 = rf(ctx, ns, datatype)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastMessage provides a mock function with given fields: ctx, ns, in
func (_m *Manager) BroadcastMessage(ctx context.Context, ns string, in *fftypes.MessageInput) (*fftypes.Message, error) {
	ret := _m.Called(ctx, ns, in)

	var r0 *fftypes.Message
	if rf, ok := ret.Get(0).(func(context.Context, string, *fftypes.MessageInput) *fftypes.Message); ok {
		r0 = rf(ctx, ns, in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *fftypes.MessageInput) error); ok {
		r1 = rf(ctx, ns, in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BroadcastNamespace provides a mock function with given fields: ctx, ns
func (_m *Manager) BroadcastNamespace(ctx context.Context, ns *fftypes.Namespace) (*fftypes.Message, error) {
	ret := _m.Called(ctx, ns)

	var r0 *fftypes.Message
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Namespace) *fftypes.Message); ok {
		r0 = rf(ctx, ns)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Namespace) error); ok {
		r1 = rf(ctx, ns)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HandleSystemBroadcast provides a mock function with given fields: ctx, msg, data
func (_m *Manager) HandleSystemBroadcast(ctx context.Context, msg *fftypes.Message, data []*fftypes.Data) (bool, error) {
	ret := _m.Called(ctx, msg, data)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Message, []*fftypes.Data) bool); ok {
		r0 = rf(ctx, msg, data)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Message, []*fftypes.Data) error); ok {
		r1 = rf(ctx, msg, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Start provides a mock function with given fields:
func (_m *Manager) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// WaitStop provides a mock function with given fields:
func (_m *Manager) WaitStop() {
	_m.Called()
}
