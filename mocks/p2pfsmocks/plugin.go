// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package p2pfsmocks

import (
	context "context"

	config "github.com/kaleido-io/firefly/internal/config"

	fftypes "github.com/kaleido-io/firefly/internal/fftypes"

	io "io"

	mock "github.com/stretchr/testify/mock"

	p2pfs "github.com/kaleido-io/firefly/internal/p2pfs"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *p2pfs.Capabilities {
	ret := _m.Called()

	var r0 *p2pfs.Capabilities
	if rf, ok := ret.Get(0).(func() *p2pfs.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2pfs.Capabilities)
		}
	}

	return r0
}

// Init provides a mock function with given fields: ctx, prefix, events
func (_m *Plugin) Init(ctx context.Context, prefix config.ConfigPrefix, events p2pfs.Events) error {
	ret := _m.Called(ctx, prefix, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ConfigPrefix, p2pfs.Events) error); ok {
		r0 = rf(ctx, prefix, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitConfigPrefix provides a mock function with given fields: prefix
func (_m *Plugin) InitConfigPrefix(prefix config.ConfigPrefix) {
	_m.Called(prefix)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// PublishData provides a mock function with given fields: ctx, data
func (_m *Plugin) PublishData(ctx context.Context, data io.Reader) (*fftypes.Bytes32, string, error) {
	ret := _m.Called(ctx, data)

	var r0 *fftypes.Bytes32
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) *fftypes.Bytes32); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Bytes32)
		}
	}

	var r1 string
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) string); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(string)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, io.Reader) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RetrieveData provides a mock function with given fields: ctx, payloadRef
func (_m *Plugin) RetrieveData(ctx context.Context, payloadRef *fftypes.Bytes32) (io.ReadCloser, error) {
	ret := _m.Called(ctx, payloadRef)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Bytes32) io.ReadCloser); ok {
		r0 = rf(ctx, payloadRef)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *fftypes.Bytes32) error); ok {
		r1 = rf(ctx, payloadRef)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
