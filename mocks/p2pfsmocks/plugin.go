// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package p2pfsmocks

import (
	context "context"
	io "io"

	fftypes "github.com/kaleido-io/firefly/internal/fftypes"

	mock "github.com/stretchr/testify/mock"

	p2pfs "github.com/kaleido-io/firefly/internal/p2pfs"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *p2pfs.Capabilities {
	ret := _m.Called()

	var r0 *p2pfs.Capabilities
	if rf, ok := ret.Get(0).(func() *p2pfs.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*p2pfs.Capabilities)
		}
	}

	return r0
}

// ConfigInterface provides a mock function with given fields:
func (_m *Plugin) ConfigInterface() interface{} {
	ret := _m.Called()

	var r0 interface{}
	if rf, ok := ret.Get(0).(func() interface{}); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// Init provides a mock function with given fields: ctx, config, events
func (_m *Plugin) Init(ctx context.Context, config interface{}, events p2pfs.Events) error {
	ret := _m.Called(ctx, config, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, p2pfs.Events) error); ok {
		r0 = rf(ctx, config, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PublishData provides a mock function with given fields: ctx, data
func (_m *Plugin) PublishData(ctx context.Context, data io.Reader) (*fftypes.Bytes32, error) {
	ret := _m.Called(ctx, data)

	var r0 *fftypes.Bytes32
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader) *fftypes.Bytes32); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Bytes32)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, io.Reader) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
