// Code generated by mockery v1.0.0. DO NOT EDIT.

package tokenmocks

import (
	context "context"

	config "github.com/hyperledger/firefly/internal/config"

	fftypes "github.com/hyperledger/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"

	tokens "github.com/hyperledger/firefly/pkg/tokens"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *tokens.Capabilities {
	ret := _m.Called()

	var r0 *tokens.Capabilities
	if rf, ok := ret.Get(0).(func() *tokens.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tokens.Capabilities)
		}
	}

	return r0
}

// CreateTokenPool provides a mock function with given fields: ctx, operationID, pool
func (_m *Plugin) CreateTokenPool(ctx context.Context, operationID *fftypes.UUID, pool *fftypes.TokenPool) error {
	ret := _m.Called(ctx, operationID, pool)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, *fftypes.TokenPool) error); ok {
		r0 = rf(ctx, operationID, pool)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Init provides a mock function with given fields: ctx, name, prefix, callbacks
func (_m *Plugin) Init(ctx context.Context, name string, prefix config.Prefix, callbacks tokens.Callbacks) error {
	ret := _m.Called(ctx, name, prefix, callbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, config.Prefix, tokens.Callbacks) error); ok {
		r0 = rf(ctx, name, prefix, callbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitPrefix provides a mock function with given fields: prefix
func (_m *Plugin) InitPrefix(prefix config.PrefixArray) {
	_m.Called(prefix)
}

// MintTokens provides a mock function with given fields: ctx, operationID, mint
func (_m *Plugin) MintTokens(ctx context.Context, operationID *fftypes.UUID, mint *fftypes.TokenTransfer) error {
	ret := _m.Called(ctx, operationID, mint)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, *fftypes.TokenTransfer) error); ok {
		r0 = rf(ctx, operationID, mint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Plugin) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// TransferTokens provides a mock function with given fields: ctx, operationID, mint
func (_m *Plugin) TransferTokens(ctx context.Context, operationID *fftypes.UUID, mint *fftypes.TokenTransfer) error {
	ret := _m.Called(ctx, operationID, mint)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.UUID, *fftypes.TokenTransfer) error); ok {
		r0 = rf(ctx, operationID, mint)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
