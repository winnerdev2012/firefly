// Code generated by mockery v1.0.0. DO NOT EDIT.

package dataexchangemocks

import (
	context "context"

	config "github.com/kaleido-io/firefly/internal/config"

	dataexchange "github.com/kaleido-io/firefly/pkg/dataexchange"

	fftypes "github.com/kaleido-io/firefly/pkg/fftypes"

	io "io"

	mock "github.com/stretchr/testify/mock"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *dataexchange.Capabilities {
	ret := _m.Called()

	var r0 *dataexchange.Capabilities
	if rf, ok := ret.Get(0).(func() *dataexchange.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.Capabilities)
		}
	}

	return r0
}

// GetEndpointInfo provides a mock function with given fields: ctx
func (_m *Plugin) GetEndpointInfo(ctx context.Context) (fftypes.JSONObject, error) {
	ret := _m.Called(ctx)

	var r0 fftypes.JSONObject
	if rf, ok := ret.Get(0).(func(context.Context) fftypes.JSONObject); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(fftypes.JSONObject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, prefix, callbacks
func (_m *Plugin) Init(ctx context.Context, prefix config.Prefix, callbacks dataexchange.Callbacks) error {
	ret := _m.Called(ctx, prefix, callbacks)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.Prefix, dataexchange.Callbacks) error); ok {
		r0 = rf(ctx, prefix, callbacks)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitPrefix provides a mock function with given fields: prefix
func (_m *Plugin) InitPrefix(prefix config.Prefix) {
	_m.Called(prefix)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Start provides a mock function with given fields:
func (_m *Plugin) Start() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadBLOB provides a mock function with given fields: ctx, ns, id, reader
func (_m *Plugin) UploadBLOB(ctx context.Context, ns string, id fftypes.UUID, reader io.Reader) error {
	ret := _m.Called(ctx, ns, id, reader)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, fftypes.UUID, io.Reader) error); ok {
		r0 = rf(ctx, ns, id, reader)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
