// Code generated by mockery v1.0.0. DO NOT EDIT.

package dataexchangemocks

import (
	dataexchange "github.com/hyperledger/firefly/pkg/dataexchange"
	mock "github.com/stretchr/testify/mock"
)

// DXEvent is an autogenerated mock type for the DXEvent type
type DXEvent struct {
	mock.Mock
}

// Ack provides a mock function with given fields:
func (_m *DXEvent) Ack() {
	_m.Called()
}

// AckWithManifest provides a mock function with given fields: manifest
func (_m *DXEvent) AckWithManifest(manifest string) {
	_m.Called(manifest)
}

// ID provides a mock function with given fields:
func (_m *DXEvent) ID() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MessageReceived provides a mock function with given fields:
func (_m *DXEvent) MessageReceived() *dataexchange.MessageReceived {
	ret := _m.Called()

	var r0 *dataexchange.MessageReceived
	if rf, ok := ret.Get(0).(func() *dataexchange.MessageReceived); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.MessageReceived)
		}
	}

	return r0
}

// PrivateBlobReceived provides a mock function with given fields:
func (_m *DXEvent) PrivateBlobReceived() *dataexchange.PrivateBlobReceived {
	ret := _m.Called()

	var r0 *dataexchange.PrivateBlobReceived
	if rf, ok := ret.Get(0).(func() *dataexchange.PrivateBlobReceived); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.PrivateBlobReceived)
		}
	}

	return r0
}

// TransferResult provides a mock function with given fields:
func (_m *DXEvent) TransferResult() *dataexchange.TransferResult {
	ret := _m.Called()

	var r0 *dataexchange.TransferResult
	if rf, ok := ret.Get(0).(func() *dataexchange.TransferResult); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dataexchange.TransferResult)
		}
	}

	return r0
}

// Type provides a mock function with given fields:
func (_m *DXEvent) Type() dataexchange.DXEventType {
	ret := _m.Called()

	var r0 dataexchange.DXEventType
	if rf, ok := ret.Get(0).(func() dataexchange.DXEventType); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(dataexchange.DXEventType)
	}

	return r0
}
