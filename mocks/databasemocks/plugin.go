// Code generated by mockery v0.0.0-dev. DO NOT EDIT.

package databasemocks

import (
	context "context"

	config "github.com/kaleido-io/firefly/internal/config"

	database "github.com/kaleido-io/firefly/internal/database"

	fftypes "github.com/kaleido-io/firefly/internal/fftypes"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// Plugin is an autogenerated mock type for the Plugin type
type Plugin struct {
	mock.Mock
}

// Capabilities provides a mock function with given fields:
func (_m *Plugin) Capabilities() *database.Capabilities {
	ret := _m.Called()

	var r0 *database.Capabilities
	if rf, ok := ret.Get(0).(func() *database.Capabilities); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*database.Capabilities)
		}
	}

	return r0
}

// GetBatchById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetBatchById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.Batch, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.Batch
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.Batch); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBatches provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetBatches(ctx context.Context, filter database.Filter) ([]*fftypes.Batch, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Batch
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Batch); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Batch)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetData provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetData(ctx context.Context, filter database.Filter) ([]*fftypes.Data, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Data
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Data); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetDataById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.Data, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.Data
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.Data); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Data)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataDefinitionById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetDataDefinitionById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.DataDefinition, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.DataDefinition
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.DataDefinition); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.DataDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDataDefinitions provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetDataDefinitions(ctx context.Context, filter database.Filter) ([]*fftypes.DataDefinition, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.DataDefinition
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.DataDefinition); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.DataDefinition)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessageById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetMessageById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.Message, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.Message
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.Message); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMessages provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetMessages(ctx context.Context, filter database.Filter) ([]*fftypes.Message, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Message
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Message); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Message)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffset provides a mock function with given fields: ctx, t, ns, name
func (_m *Plugin) GetOffset(ctx context.Context, t fftypes.OffsetType, ns string, name string) (*fftypes.Offset, error) {
	ret := _m.Called(ctx, t, ns, name)

	var r0 *fftypes.Offset
	if rf, ok := ret.Get(0).(func(context.Context, fftypes.OffsetType, string, string) *fftypes.Offset); ok {
		r0 = rf(ctx, t, ns, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Offset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, fftypes.OffsetType, string, string) error); ok {
		r1 = rf(ctx, t, ns, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOffsets provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetOffsets(ctx context.Context, filter database.Filter) ([]*fftypes.Offset, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Offset
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Offset); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Offset)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperationById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetOperationById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.Operation, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.Operation
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.Operation); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOperations provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetOperations(ctx context.Context, filter database.Filter) ([]*fftypes.Operation, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Operation
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Operation); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Operation)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactionById provides a mock function with given fields: ctx, ns, id
func (_m *Plugin) GetTransactionById(ctx context.Context, ns string, id *uuid.UUID) (*fftypes.Transaction, error) {
	ret := _m.Called(ctx, ns, id)

	var r0 *fftypes.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, string, *uuid.UUID) *fftypes.Transaction); ok {
		r0 = rf(ctx, ns, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, *uuid.UUID) error); ok {
		r1 = rf(ctx, ns, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTransactions provides a mock function with given fields: ctx, filter
func (_m *Plugin) GetTransactions(ctx context.Context, filter database.Filter) ([]*fftypes.Transaction, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*fftypes.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter) []*fftypes.Transaction); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*fftypes.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, database.Filter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Init provides a mock function with given fields: ctx, prefix, events
func (_m *Plugin) Init(ctx context.Context, prefix config.ConfigPrefix, events database.Events) error {
	ret := _m.Called(ctx, prefix, events)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, config.ConfigPrefix, database.Events) error); ok {
		r0 = rf(ctx, prefix, events)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitConfigPrefix provides a mock function with given fields: prefix
func (_m *Plugin) InitConfigPrefix(prefix config.ConfigPrefix) {
	_m.Called(prefix)
}

// Name provides a mock function with given fields:
func (_m *Plugin) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RunAsGroup provides a mock function with given fields: ctx, fn
func (_m *Plugin) RunAsGroup(ctx context.Context, fn func(context.Context) error) error {
	ret := _m.Called(ctx, fn)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, fn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateBatch provides a mock function with given fields: ctx, id, update
func (_m *Plugin) UpdateBatch(ctx context.Context, id *uuid.UUID, update database.Update) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, database.Update) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateData provides a mock function with given fields: ctx, id, update
func (_m *Plugin) UpdateData(ctx context.Context, id *uuid.UUID, update database.Update) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, database.Update) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateDataDefinition provides a mock function with given fields: ctx, id, update
func (_m *Plugin) UpdateDataDefinition(ctx context.Context, id *uuid.UUID, update database.Update) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, database.Update) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMessage provides a mock function with given fields: ctx, id, update
func (_m *Plugin) UpdateMessage(ctx context.Context, id *uuid.UUID, update database.Update) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, database.Update) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOffset provides a mock function with given fields: ctx, t, ns, name, update
func (_m *Plugin) UpdateOffset(ctx context.Context, t fftypes.OffsetType, ns string, name string, update database.Update) error {
	ret := _m.Called(ctx, t, ns, name, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, fftypes.OffsetType, string, string, database.Update) error); ok {
		r0 = rf(ctx, t, ns, name, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateOperations provides a mock function with given fields: ctx, filter, update
func (_m *Plugin) UpdateOperations(ctx context.Context, filter database.Filter, update database.Update) error {
	ret := _m.Called(ctx, filter, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, database.Filter, database.Update) error); ok {
		r0 = rf(ctx, filter, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTransaction provides a mock function with given fields: ctx, id, update
func (_m *Plugin) UpdateTransaction(ctx context.Context, id *uuid.UUID, update database.Update) error {
	ret := _m.Called(ctx, id, update)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *uuid.UUID, database.Update) error); ok {
		r0 = rf(ctx, id, update)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertBatch provides a mock function with given fields: ctx, data, allowHashUpdate
func (_m *Plugin) UpsertBatch(ctx context.Context, data *fftypes.Batch, allowHashUpdate bool) error {
	ret := _m.Called(ctx, data, allowHashUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Batch, bool) error); ok {
		r0 = rf(ctx, data, allowHashUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertData provides a mock function with given fields: ctx, data, allowHashUpdate
func (_m *Plugin) UpsertData(ctx context.Context, data *fftypes.Data, allowHashUpdate bool) error {
	ret := _m.Called(ctx, data, allowHashUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Data, bool) error); ok {
		r0 = rf(ctx, data, allowHashUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertDataDefinition provides a mock function with given fields: ctx, datadef
func (_m *Plugin) UpsertDataDefinition(ctx context.Context, datadef *fftypes.DataDefinition) error {
	ret := _m.Called(ctx, datadef)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.DataDefinition) error); ok {
		r0 = rf(ctx, datadef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertMessage provides a mock function with given fields: ctx, message, allowHashUpdate
func (_m *Plugin) UpsertMessage(ctx context.Context, message *fftypes.Message, allowHashUpdate bool) error {
	ret := _m.Called(ctx, message, allowHashUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Message, bool) error); ok {
		r0 = rf(ctx, message, allowHashUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertOffset provides a mock function with given fields: ctx, data
func (_m *Plugin) UpsertOffset(ctx context.Context, data *fftypes.Offset) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Offset) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertOperation provides a mock function with given fields: ctx, operation
func (_m *Plugin) UpsertOperation(ctx context.Context, operation *fftypes.Operation) error {
	ret := _m.Called(ctx, operation)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Operation) error); ok {
		r0 = rf(ctx, operation)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpsertTransaction provides a mock function with given fields: ctx, data, allowHashUpdate
func (_m *Plugin) UpsertTransaction(ctx context.Context, data *fftypes.Transaction, allowHashUpdate bool) error {
	ret := _m.Called(ctx, data, allowHashUpdate)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Transaction, bool) error); ok {
		r0 = rf(ctx, data, allowHashUpdate)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
