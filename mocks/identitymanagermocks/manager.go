// Code generated by mockery v1.0.0. DO NOT EDIT.

package identitymanagermocks

import (
	context "context"

	fftypes "github.com/hyperledger-labs/firefly/pkg/fftypes"

	mock "github.com/stretchr/testify/mock"
)

// Manager is an autogenerated mock type for the Manager type
type Manager struct {
	mock.Mock
}

// GetLocalOrganization provides a mock function with given fields: ctx
func (_m *Manager) GetLocalOrganization(ctx context.Context) (*fftypes.Organization, error) {
	ret := _m.Called(ctx)

	var r0 *fftypes.Organization
	if rf, ok := ret.Get(0).(func(context.Context) *fftypes.Organization); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*fftypes.Organization)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OrgDID provides a mock function with given fields: org
func (_m *Manager) OrgDID(org *fftypes.Organization) string {
	ret := _m.Called(org)

	var r0 string
	if rf, ok := ret.Get(0).(func(*fftypes.Organization) string); ok {
		r0 = rf(org)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// ResolveInputIdentity provides a mock function with given fields: ctx, _a1
func (_m *Manager) ResolveInputIdentity(ctx context.Context, _a1 *fftypes.Identity) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *fftypes.Identity) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResolveLocalOrgDID provides a mock function with given fields: ctx
func (_m *Manager) ResolveLocalOrgDID(ctx context.Context) (string, error) {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSigningKey provides a mock function with given fields: ctx, inputKey
func (_m *Manager) ResolveSigningKey(ctx context.Context, inputKey string) (string, error) {
	ret := _m.Called(ctx, inputKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, inputKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, inputKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResolveSigningKeyIdentity provides a mock function with given fields: ctx, signingKey
func (_m *Manager) ResolveSigningKeyIdentity(ctx context.Context, signingKey string) (string, error) {
	ret := _m.Called(ctx, signingKey)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, signingKey)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, signingKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
